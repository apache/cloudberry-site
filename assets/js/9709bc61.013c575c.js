"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[56349],{93177:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>o});var r=s(85893),i=s(11151);const d={},c="Develop Database Extensions Using PGRX",l={id:"developer/develop-extensions-using-rust",title:"Develop Database Extensions Using PGRX",description:"This document explains how to develop database extensions using Rust and the PGRX framework. PGRX is a Rust framework for developing extensions for Apache Cloudberry, offering a safe and efficient development experience.",source:"@site/versioned_docs/version-1.x/developer/develop-extensions-using-rust.md",sourceDirName:"developer",slug:"/developer/develop-extensions-using-rust",permalink:"/docs/1.x/developer/develop-extensions-using-rust",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-1.x/developer/develop-extensions-using-rust.md",tags:[],version:"1.x",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1754028859,formattedLastUpdatedAt:"Aug 1, 2025",frontMatter:{},sidebar:"docsbars",previous:{title:"Recommended Monitoring and Maintenance Tasks",permalink:"/docs/1.x/sys-admin/recommended-maintenance-monitoring-tasks"},next:{title:"DBeaver",permalink:"/docs/1.x/ecosystem/sql-clients/dbeaver"}},t={},o=[{value:"Requirements for Development Environment",id:"requirements-for-development-environment",level:2},{value:"Basic Software Environment",id:"basic-software-environment",level:3},{value:"PostgreSQL Dependencies",id:"postgresql-dependencies",level:3},{value:"Quick Start for PGRX",id:"quick-start-for-pgrx",level:2},{value:"Set up and Install PGRX",id:"set-up-and-install-pgrx",level:3},{value:"Create an Extension",id:"create-an-extension",level:3},{value:"Install and Use the Extension",id:"install-and-use-the-extension",level:3},{value:"PGRX Type Mapping",id:"pgrx-type-mapping",level:2},{value:"Custom Type Conversions",id:"custom-type-conversions",level:3},{value:"Type Mapping Details",id:"type-mapping-details",level:3},{value:"PGRX Core Features",id:"pgrx-core-features",level:2},{value:"Complete Management for Development Environment",id:"complete-management-for-development-environment",level:3},{value:"Automatic Mode Generation",id:"automatic-mode-generation",level:3},{value:"Security First",id:"security-first",level:3},{value:"UDF Supports",id:"udf-supports",level:3},{value:"Simple Custom Types",id:"simple-custom-types",level:3},{value:"Server Programming Interface (SPI)",id:"server-programming-interface-spi",level:3},{value:"Advanced Features",id:"advanced-features",level:3},{value:"Considerations and Best Practices for PGRX",id:"considerations-and-best-practices-for-pgrx",level:2},{value:"Debugging and Development Tips",id:"debugging-and-development-tips",level:2},{value:"Learning Resources for PGRX",id:"learning-resources-for-pgrx",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"develop-database-extensions-using-pgrx",children:"Develop Database Extensions Using PGRX"}),"\n",(0,r.jsx)(n.p,{children:"This document explains how to develop database extensions using Rust and the PGRX framework. PGRX is a Rust framework for developing extensions for Apache Cloudberry, offering a safe and efficient development experience."}),"\n",(0,r.jsxs)(n.p,{children:["For the core features of PGRX, see ",(0,r.jsx)(n.a,{href:"#pgrx-core-features",children:"PGRX Core Features"}),". For notes of PGRX, see ",(0,r.jsx)(n.a,{href:"#considerations-and-best-practices-for-pgrx",children:"Considerations and Best Practices for PGRX"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"requirements-for-development-environment",children:"Requirements for Development Environment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Make sure that your OS is one of Debian/Ubuntu and RHEL/CentOS."}),"\n",(0,r.jsx)(n.li,{children:"Make sure that your Apache Cloudberry cluster is compiled from source code, not installed using RPM package."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-software-environment",children:"Basic Software Environment"}),"\n",(0,r.jsx)(n.p,{children:"Required software:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Rust toolchain (",(0,r.jsx)(n.code,{children:"rustc"}),", ",(0,r.jsx)(n.code,{children:"cargo"}),", and ",(0,r.jsx)(n.code,{children:"rustfmt"}),") - install via ",(0,r.jsx)(n.a,{href:"https://rustup.rs",children:"https://rustup.rs"})]}),"\n",(0,r.jsx)(n.li,{children:"Git"}),"\n",(0,r.jsx)(n.li,{children:"libclang 11 or higher (for bindgen)"}),"\n",(0,r.jsx)(n.li,{children:"GCC 7 or higher"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"postgresql-dependencies",children:"PostgreSQL Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Install required PostgreSQL dependencies for your OS:"}),"\n",(0,r.jsx)(n.p,{children:"For Debian/Ubuntu:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison \\\n    libxml2-dev libxslt-dev libssl-dev libxml2-utils xsltproc ccache pkg-config\n"})}),"\n",(0,r.jsx)(n.p,{children:"For RHEL/CentOS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo yum install -y bison-devel readline-devel zlib-devel openssl-devel wget ccache\nsudo yum groupinstall -y 'Development Tools'\n"})}),"\n",(0,r.jsx)(n.p,{children:"After installing the dependencies, you can start developing extensions."}),"\n",(0,r.jsx)(n.h2,{id:"quick-start-for-pgrx",children:"Quick Start for PGRX"}),"\n",(0,r.jsx)(n.p,{children:"This section introduces the process of quickly developing extensions using PGRX, including:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Setting up and installing PGRX"}),"\n",(0,r.jsx)(n.li,{children:"Creating extension"}),"\n",(0,r.jsx)(n.li,{children:"Installing and using extension"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"set-up-and-install-pgrx",children:"Set up and Install PGRX"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["PGRX is maintained by PgCentral Foundation, Inc., while we used here is one ",(0,r.jsx)(n.a,{href:"https://github.com/cloudberry-contrib/pgrx",children:"forked PGRX version"})," with better compatibility within Cloudberry. It's contributed by the community members and customized for Cloudberry, but please note that it is not maintained as one official Cloudberry project."]})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Set the environment variable for Apache Cloudberry's ",(0,r.jsx)(n.code,{children:"pg_config"})," path, where ",(0,r.jsx)(n.code,{children:"<pg_config_path>"})," is the path in your Apache Cloudberry cluster (for example, ",(0,r.jsx)(n.code,{children:"/usr/local/cloudberry-db/bin/pg_config"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export PGRX_PG_CONFIG_PATH=<pg_config_path>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Build the PGRX framework:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Clone the Apache Cloudberry-compatible ",(0,r.jsx)(n.code,{children:"pgrx"})," repository:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/cloudberry-contrib/pgrx\ncd pgrx\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Build the code with ",(0,r.jsx)(n.code,{children:"pg14"})," and ",(0,r.jsx)(n.code,{children:"cbdb"})," features enabled:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'cargo build --features "pg14, cbdb"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Install the Apache Cloudberry-compatible ",(0,r.jsx)(n.code,{children:"cargo-pgrx"})," tool:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo install --path cargo-pgrx/\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Initialize the environment with your database kernel version:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo pgrx init --pg14=`which pg_config`\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"create-an-extension",children:"Create an Extension"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Generate an extension template. This example creates an extension named ",(0,r.jsx)(n.code,{children:"my_extension"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo pgrx new my_extension\ncd my_extension\n"})}),"\n",(0,r.jsx)(n.p,{children:"The created directory structure is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 my_extension.control\n\u251c\u2500\u2500 sql\n\u2514\u2500\u2500 src\n   \u251c\u2500\u2500 bin\n   \u2502   \u2514\u2500\u2500 pgrx_embed.rs\n   \u2514\u2500\u2500 lib.rs\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Modify dependencies in ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," to use local PGRX:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Change ",(0,r.jsx)(n.code,{children:'pgrx = "0.12.7"'})," under ",(0,r.jsx)(n.code,{children:"[dependencies]"})," to point to the ",(0,r.jsx)(n.code,{children:"pgrx"})," directory in your local PGRX repository. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[dependencies]\npgrx = { path = "/home/gpadmin/pgrx/pgrx/", features = ["pg14", "cbdb"] }\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"pgrx-pg-sys"})," under ",(0,r.jsx)(n.code,{children:"[dependencies]"})," to point to the ",(0,r.jsx)(n.code,{children:"pgrx-pg-sys"})," directory in your local PGRX repository. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[dependencies]\npgrx-pg-sys = { path = "/home/gpadmin/pgrx/pgrx-pg-sys/", features = ["pg14", "cbdb"] }\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Change ",(0,r.jsx)(n.code,{children:'pgrx-tests = "0.12.7"'})," under ",(0,r.jsx)(n.code,{children:"[dev-dependencies]"})," to point to the ",(0,r.jsx)(n.code,{children:"pgrx-tests"})," directory in your local PGRX repository:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[dev-dependencies]\npgrx-tests = { path = "/home/gpadmin/pgrx/pgrx-tests/" }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Append the extension name ",(0,r.jsx)(n.code,{children:"my_extension"})," to the ",(0,r.jsx)(n.code,{children:"workspace.members"})," array of the ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," file in the root directory of your local PGRX repository. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"vi /home/gpadmin/pgrx/Cargo.toml\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[workspace]\nresolver = "2"\nmembers = [\n   "cargo-pgrx",\n   "pgrx",\n   "pgrx-macros",\n   "pgrx-pg-config",\n   "pgrx-pg-sys",\n   "pgrx-sql-entity-graph",\n   "pgrx-tests",\n   "pgrx-bindgen",\n   "my_extension"\n]\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Grant the current system user the permissions to the Apache Cloudberry directory. For example, if the current user is ",(0,r.jsx)(n.code,{children:"gpadmin"})," and Apache Cloudberry directory is ",(0,r.jsx)(n.code,{children:"/usr/local/cloudberrydb"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo chown -R gpadmin:gpadmin /usr/local/cloudberrydb\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"install-and-use-the-extension",children:"Install and Use the Extension"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Install the extension:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo pgrx install\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"To use the extension in the database, connect to the database and execute the following statements:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE EXTENSION my_extension;\n\n-- Tests example function\nSELECT hello_my_extension();\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"pgrx-type-mapping",children:"PGRX Type Mapping"}),"\n",(0,r.jsx)(n.p,{children:"The table below lists the complete mapping of Apache Cloudberry (PostgreSQL) data types to Rust types:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Database data type"}),(0,r.jsxs)(n.th,{children:["Rust type (",(0,r.jsx)(n.code,{children:"Option<T>"}),")"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bytea"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Vec<u8>"})," or ",(0,r.jsx)(n.code,{children:"&[u8]"})," (zero-copy)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"text"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"String"})," or ",(0,r.jsx)(n.code,{children:"&str"})," (zero-copy)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"varchar"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"String"})," or ",(0,r.jsx)(n.code,{children:"&str"})," (zero-copy) or ",(0,r.jsx)(n.code,{children:"char"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"char"'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i8"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"smallint"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i16"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i32"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bigint"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i64"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"oid"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"u32"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"real"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"f32"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"double precision"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"f64"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bool"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bool"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"json"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Json(serde_json::Value)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"jsonb"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::JsonB(serde_json::Value)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"date"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Date"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"time"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Time"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timestamp"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Timestamp"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"time with time zone"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::TimeWithTimeZone"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timestamp with time zone"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::TimestampWithTimeZone"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"anyarray"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::AnyArray"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"anyelement"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::AnyElement"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"box"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::pg_sys::BOX"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"point"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::pg_sys::Point"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tid"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::pg_sys::ItemPointerData"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"cstring"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"&core::ffi::CStr"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"numeric"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"pgrx::Numeric<P, S>"})," or ",(0,r.jsx)(n.code,{children:"pgrx::AnyNumeric"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"void"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ARRAY[]::<type>"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Vec<Option<T>>"})," or ",(0,r.jsx)(n.code,{children:"pgrx::Array<T>"})," (zero-copy)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int4range"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Range<i32>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int8range"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Range<i64>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"numrange"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"pgrx::Range<Numeric<P, S>>"})," or ",(0,r.jsx)(n.code,{children:"pgrx::Range<AnyRange>"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"daterange"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Range<pgrx::Date>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tsrange"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Range<pgrx::Timestamp>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tstzrange"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Range<pgrx::TimestampWithTimeZone>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"NULL"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Option::None"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"internal"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"pgrx::PgBox<T>"})," (where ",(0,r.jsx)(n.code,{children:"T"})," can be any Rust/Postgres struct)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"uuid"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pgrx::Uuid([u8; 16])"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"custom-type-conversions",children:"Custom Type Conversions"}),"\n",(0,r.jsx)(n.p,{children:"You can implement additional type conversions in the following ways:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implement ",(0,r.jsx)(n.code,{children:"IntoDatum"})," and ",(0,r.jsx)(n.code,{children:"FromDatum"})," traits."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"#[derive(PostgresType)]"})," and ",(0,r.jsx)(n.code,{children:"#[derive(PostgresEnum)]"})," for automatic type conversions."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"type-mapping-details",children:"Type Mapping Details"}),"\n",(0,r.jsxs)(n.p,{children:["PGRX converts ",(0,r.jsx)(n.code,{children:"text"})," and ",(0,r.jsx)(n.code,{children:"varchar"})," to ",(0,r.jsx)(n.code,{children:"&str"})," or ",(0,r.jsx)(n.code,{children:"String"}),", and verifies whether the encoding is UTF-8. If an encoding other than UTF-8 is detected, PGRX triggers a panic to alert the developer. Because UTF-8 validation might affect performance, it is not recommended to rely on UTF-8 validation."]}),"\n",(0,r.jsxs)(n.p,{children:["The default encoding for PostgreSQL servers is ",(0,r.jsx)(n.code,{children:"SQL_ASCII"}),", which guarantees neither ASCII nor UTF-8 (Apache Cloudberry will accept but ignore non-ASCII bytes). For best results, always use UTF-8 encoding with PGRX and explicitly set the database encoding when creating the database."]}),"\n",(0,r.jsx)(n.h2,{id:"pgrx-core-features",children:"PGRX Core Features"}),"\n",(0,r.jsx)(n.h3,{id:"complete-management-for-development-environment",children:"Complete Management for Development Environment"}),"\n",(0,r.jsx)(n.p,{children:"cargo-pgrx provides a complete set of command-line tools:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cargo pgrx new"}),": Quickly creates a new extension."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cargo pgrx init"}),": Installs or registers an Apache Cloudberry (PostgreSQL) instance."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cargo pgrx run"}),": Interactively tests the extension in psql (or pgcli)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cargo pgrx test"}),": Performs unit tests across multiple Apache Cloudberry (PostgreSQL) versions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cargo pgrx package"}),": Creates an extension installation package."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"automatic-mode-generation",children:"Automatic Mode Generation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fully implements the extension using Rust."}),"\n",(0,r.jsx)(n.li,{children:"Automatically maps various Rust types to Apache Cloudberry (PostgreSQL) types."}),"\n",(0,r.jsxs)(n.li,{children:["Automatically generates SQL schema (can also be manually generated using ",(0,r.jsx)(n.code,{children:"cargo pgrx schema"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"extension_sql!"})," and ",(0,r.jsx)(n.code,{children:"extension_sql_file!"})," to include custom SQL."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"security-first",children:"Security First"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Converts Rust's ",(0,r.jsx)(n.code,{children:"panic!"})," to Apache Cloudberry/PostgreSQL's ",(0,r.jsx)(n.code,{children:"ERROR"})," (abort the transaction, not the process)."]}),"\n",(0,r.jsxs)(n.li,{children:["Memory management follows Rust's ",(0,r.jsx)(n.code,{children:"DROP"})," semantics, including handling ",(0,r.jsx)(n.code,{children:"panic!"})," and ",(0,r.jsx)(n.code,{children:"elog(ERROR)"})," cases."]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"#[pg_guard]"})," procedural macro to ensure safety."]}),"\n",(0,r.jsxs)(n.li,{children:["Apache Cloudberry's ",(0,r.jsx)(n.code,{children:"Datum"})," is represented as ",(0,r.jsx)(n.code,{children:"Option<T> where T: FromDatum"}),", with NULL values safely represented as ",(0,r.jsx)(n.code,{children:"Option::<T>::None"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"udf-supports",children:"UDF Supports"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"#[pg_extern]"})," annotation to expose functions to Apache Cloudberry."]}),"\n",(0,r.jsxs)(n.li,{children:["Returns ",(0,r.jsx)(n.code,{children:"pgrx::iter::SetOfIterator<'a, T>"})," to implement ",(0,r.jsx)(n.code,{children:"RETURNS SETOF"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Returns ",(0,r.jsx)(n.code,{children:"pgrx::iter::TableIterator<'a, T>"})," to implement ",(0,r.jsx)(n.code,{children:"RETURNS TABLE (...)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"#[pg_trigger]"})," to create trigger functions."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"simple-custom-types",children:"Simple Custom Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"#[derive(PostgresType)]"})," to treat Rust structs as Apache Cloudberry types.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"By default, CBOR encoding is used for storage, and JSON is used as a human-readable format."}),"\n",(0,r.jsx)(n.li,{children:"Supports custom memory/disk/readable formats."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"#[derive(PostgresEnum)]"})," to treat Rust enums as Apache Cloudberry (PostgreSQL) enums."]}),"\n",(0,r.jsxs)(n.li,{children:["Supports composite types via ",(0,r.jsx)(n.code,{children:'pgrx::composite_type!("Sample")'})," macro."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"server-programming-interface-spi",children:"Server Programming Interface (SPI)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Secure access to SPI."}),"\n",(0,r.jsx)(n.li,{children:"Transparently returns ownership of Datum from SPI context."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Securely accesses Apache Cloudberry's memory context system via ",(0,r.jsx)(n.code,{children:"pgrx::PgMemoryContexts"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Supports executor/planner/transaction/subtransaction hooks."}),"\n",(0,r.jsxs)(n.li,{children:["Securely handles Apache Cloudberry pointers using ",(0,r.jsx)(n.code,{children:"pgrx::PgBox<T>"})," (similar to ",(0,r.jsx)(n.code,{children:"alloc::boxed::Box<T>"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Protects Rust functions passed to Apache Cloudberry's ",(0,r.jsx)(n.code,{children:'extern "C"'})," using ",(0,r.jsx)(n.code,{children:"#[pg_guard]"})," procedural macro."]}),"\n",(0,r.jsxs)(n.li,{children:["Accesses Apache Cloudberry's logging system via the ",(0,r.jsx)(n.code,{children:"eprintln!"})," macro."]}),"\n",(0,r.jsxs)(n.li,{children:["Directly (unsafe) accesses Apache Cloudberry internals via the ",(0,r.jsx)(n.code,{children:"pgrx::pg_sys"})," module."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"considerations-and-best-practices-for-pgrx",children:"Considerations and Best Practices for PGRX"}),"\n",(0,r.jsx)(n.p,{children:"Thread supports:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Apache Cloudberry strictly follows a single-threaded model."}),"\n",(0,r.jsx)(n.li,{children:"Custom threads cannot call internal database functions."}),"\n",(0,r.jsx)(n.li,{children:"The interaction method for asynchronous contexts is still under exploration."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Encoding requirements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It is recommended to use UTF-8 encoding."}),"\n",(0,r.jsx)(n.li,{children:"The default server encoding is SQL_ASCII."}),"\n",(0,r.jsx)(n.li,{children:"It is recommended to explicitly set the encoding when creating the database."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"debugging-and-development-tips",children:"Debugging and Development Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"cargo pgrx test"})," for unit testing."]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"#[pg_guard]"})," to ensure memory safety."]}),"\n",(0,r.jsx)(n.li,{children:"For custom types, uses appropriate serialization methods."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"learning-resources-for-pgrx",children:"Learning Resources for PGRX"}),"\n",(0,r.jsx)(n.p,{children:"The following resources can help you gain a deeper understanding of PGRX:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Learn about all available ",(0,r.jsx)(n.code,{children:"cargo-pgrx"})," subcommands and options: ",(0,r.jsx)(n.a,{href:"https://github.com/cloudberry-contrib/pgrx/blob/main/cargo-pgrx",children:"cargo-pgrx command details"})]}),"\n",(0,r.jsxs)(n.li,{children:["Learn how to define and use custom data types: ",(0,r.jsx)(n.a,{href:"https://github.com/cloudberry-contrib/pgrx/blob/main/pgrx-examples/custom_types",children:"custom type examples"})]}),"\n",(0,r.jsxs)(n.li,{children:["Explore how to implement custom operators: ",(0,r.jsx)(n.a,{href:"https://github.com/cloudberry-contrib/pgrx/blob/main/pgrx-examples/operators",children:"operator functions and operator classes/families"})]}),"\n",(0,r.jsxs)(n.li,{children:["Learn how to use shared memory: ",(0,r.jsx)(n.a,{href:"https://github.com/cloudberry-contrib/pgrx/blob/main/pgrx-examples/shmem",children:"shared memory support"})]}),"\n",(0,r.jsxs)(n.li,{children:["Browse example code implementations: ",(0,r.jsx)(n.a,{href:"https://github.com/cloudberry-contrib/pgrx/blob/main/pgrx-examples",children:"more example code"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>c});var r=s(67294);const i={},d=r.createContext(i);function c(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);