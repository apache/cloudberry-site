"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[83797],{78126:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=a(85893),s=a(11151);const r={title:"psql Support"},l="psql Support",o={id:"operate-with-data/sql-queries/full-text-search/text-search-psql-support",title:"psql Support",description:"The psql command-line utility provides a meta-command to display information about Apache Cloudberry full text search configurations.",source:"@site/versioned_docs/version-2.x/operate-with-data/sql-queries/full-text-search/text-search-psql-support.md",sourceDirName:"operate-with-data/sql-queries/full-text-search",slug:"/operate-with-data/sql-queries/full-text-search/text-search-psql-support",permalink:"/docs/operate-with-data/sql-queries/full-text-search/text-search-psql-support",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/operate-with-data/sql-queries/full-text-search/text-search-psql-support.md",tags:[],version:"2.x",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1756809586,formattedLastUpdatedAt:"Sep 2, 2025",frontMatter:{title:"psql Support"},sidebar:"docsbars",previous:{title:"Preferred Index Types for Text Search",permalink:"/docs/operate-with-data/sql-queries/full-text-search/preferred-indexes-for-full-text-search"},next:{title:"Full Text Search Limitations",permalink:"/docs/operate-with-data/sql-queries/full-text-search/full-text-search-limitations"}},i={},c=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"psql-support",children:"psql Support"}),"\n",(0,t.jsx)(n.p,{children:"The psql command-line utility provides a meta-command to display information about Apache Cloudberry full text search configurations."}),"\n",(0,t.jsx)(n.p,{children:"Information about text search configuration objects can be obtained in psql using a set of commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"\\dF{d,p,t}[+] [PATTERN]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["An optional ",(0,t.jsx)(n.code,{children:"+"})," produces more details."]}),"\n",(0,t.jsxs)(n.p,{children:["The optional parameter ",(0,t.jsx)(n.code,{children:"PATTERN"})," can be the name of a text search object, optionally schema-qualified. If ",(0,t.jsx)(n.code,{children:"PATTERN"})," is omitted then information about all visible objects will be displayed. ",(0,t.jsx)(n.code,{children:"PATTERN"})," can be a regular expression and can provide ",(0,t.jsx)(n.strong,{children:"separate"})," patterns for the schema and object names. The following examples illustrate this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"=> \\dF *fulltext*\n       List of text search configurations\n Schema |  Name        | Description\n--------+--------------+-------------\n public | fulltext_cfg |\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"=> \\dF *.fulltext*\n       List of text search configurations\n Schema   |  Name        | Description\n----------+----------------------------\n fulltext | fulltext_cfg |\n public   | fulltext_cfg |\n"})}),"\n",(0,t.jsx)(n.p,{children:"The available commands are:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"\\dF[+] [PATTERN]"}),": Lists text search configurations (add ",(0,t.jsx)(n.code,{children:"+"})," for more detail)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'=> \\dF russian\n            List of text search configurations\n   Schema   |  Name   |            Description             \n------------+---------+------------------------------------\n pg_catalog | russian | configuration for russian language\n\n=> \\dF+ russian\nText search configuration "pg_catalog.russian"\nParser: "pg_catalog.default"\n      Token      | Dictionaries \n-----------------+--------------\n asciihword      | english_stem\n asciiword       | english_stem\n email           | simple\n file            | simple\n float           | simple\n host            | simple\n hword           | russian_stem\n hword_asciipart | english_stem\n hword_numpart   | simple\n hword_part      | russian_stem\n int             | simple\n numhword        | simple\n numword         | simple\n sfloat          | simple\n uint            | simple\n url             | simple\n url_path        | simple\n version         | simple\n word            | russian_stem\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"\\dFd[+] [PATTERN]"}),": List text search dictionaries (add ",(0,t.jsx)(n.code,{children:"+"})," for more detail)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"=> \\dFd\n                            List of text search dictionaries\n   Schema   |      Name       |                        Description                        \n------------+-----------------+-----------------------------------------------------------\n pg_catalog | arabic_stem     | snowball stemmer for arabic language\n pg_catalog | danish_stem     | snowball stemmer for danish language\n pg_catalog | dutch_stem      | snowball stemmer for dutch language\n pg_catalog | english_stem    | snowball stemmer for english language\n pg_catalog | finnish_stem    | snowball stemmer for finnish language\n pg_catalog | french_stem     | snowball stemmer for french language\n pg_catalog | german_stem     | snowball stemmer for german language\n pg_catalog | hungarian_stem  | snowball stemmer for hungarian language\n pg_catalog | indonesian_stem | snowball stemmer for indonesian language\n pg_catalog | irish_stem      | snowball stemmer for irish language\n pg_catalog | italian_stem    | snowball stemmer for italian language\n pg_catalog | lithuanian_stem | snowball stemmer for lithuanian language\n pg_catalog | nepali_stem     | snowball stemmer for nepali language\n pg_catalog | norwegian_stem  | snowball stemmer for norwegian language\n pg_catalog | portuguese_stem | snowball stemmer for portuguese language\n pg_catalog | romanian_stem   | snowball stemmer for romanian language\n pg_catalog | russian_stem    | snowball stemmer for russian language\n pg_catalog | simple          | simple dictionary: just lower case and check for stopword\n pg_catalog | spanish_stem    | snowball stemmer for spanish language\n pg_catalog | swedish_stem    | snowball stemmer for swedish language\n pg_catalog | tamil_stem      | snowball stemmer for tamil language\n pg_catalog | turkish_stem    | snowball stemmer for turkish language\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"\\dFp[+] [PATTERN]"}),": Lists text search parsers (add ",(0,t.jsx)(n.code,{children:"+"})," for more detail)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'=> \\dFp\n        List of text search parsers\n   Schema   |  Name   |     Description     \n------------+---------+---------------------\n pg_catalog | default | default word parser\n=> \\dFp+\n    Text search parser "pg_catalog.default"\n     Method      |    Function    | Description \n-----------------+----------------+-------------\n Start parse     | prsd_start     | \n Get next token  | prsd_nexttoken | \n End parse       | prsd_end       | \n Get headline    | prsd_headline  | \n Get token types | prsd_lextype   | \n\n        Token types for parser "pg_catalog.default"\n   Token name    |               Description                \n-----------------+------------------------------------------\n asciihword      | Hyphenated word, all ASCII\n asciiword       | Word, all ASCII\n blank           | Space symbols\n email           | Email address\n entity          | XML entity\n file            | File or path name\n float           | Decimal notation\n host            | Host\n hword           | Hyphenated word, all letters\n hword_asciipart | Hyphenated word part, all ASCII\n hword_numpart   | Hyphenated word part, letters and digits\n hword_part      | Hyphenated word part, all letters\n int             | Signed integer\n numhword        | Hyphenated word, letters and digits\n numword         | Word, letters and digits\n protocol        | Protocol head\n sfloat          | Scientific notation\n tag             | XML tag\n uint            | Unsigned integer\n url             | URL\n url_path        | URL path\n version         | Version number\n word            | Word, all letters\n(23 rows)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"\\dFt[+] [PATTERN]"}),": List text search templates (add + for more detail)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"=> \\dFt\n                           List of text search templates\n   Schema   |   Name    |                        Description                        \n------------+-----------+-----------------------------------------------------------\n pg_catalog | ispell    | ispell dictionary\n pg_catalog | simple    | simple dictionary: just lower case and check for stopword\n pg_catalog | snowball  | snowball stemmer\n pg_catalog | synonym   | synonym dictionary: replace word by its synonym\n pg_catalog | thesaurus | thesaurus dictionary: phrase by phrase substitution\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>o,a:()=>l});var t=a(67294);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);