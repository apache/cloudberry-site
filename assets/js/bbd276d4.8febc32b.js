"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[47804],{95524:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var r=i(85893),a=i(11151);const t={title:"Write a Foreign Data Wrapper"},l="Write a Foreign Data Wrapper",o={id:"developer/write-a-foreign-data-wrapper",title:"Write a Foreign Data Wrapper",description:"This guide outlines how to write a new foreign data wrapper (FDW) for Apache Cloudberry. A foreign data wrapper is a library that consists of a set of functions that the Apache Cloudberry server calls to access external data sources. The FDW is responsible for fetching data from remote data stores and returning it to the Apache Cloudberry executor.",source:"@site/docs/developer/write-a-foreign-data-wrapper.md",sourceDirName:"developer",slug:"/developer/write-a-foreign-data-wrapper",permalink:"/docs/next/developer/write-a-foreign-data-wrapper",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/docs/developer/write-a-foreign-data-wrapper.md",tags:[],version:"current",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1760494022,formattedLastUpdatedAt:"Oct 15, 2025",frontMatter:{title:"Write a Foreign Data Wrapper"},sidebar:"docsbars",previous:{title:"Develop Database Extensions Using PGRX",permalink:"/docs/next/developer/develop-extensions-using-rust"},next:{title:"DBeaver",permalink:"/docs/next/ecosystem/sql-clients/dbeaver"}},s={},c=[{value:"Before you begin",id:"before-you-begin",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Header files",id:"header-files",level:3},{value:"FDW architecture",id:"fdw-architecture",level:2},{value:"Handler function",id:"handler-function",level:3},{value:"Validator function",id:"validator-function",level:3},{value:"Callback functions",id:"callback-functions",level:2},{value:"Required scan-related callbacks",id:"required-scan-related-callbacks",level:3},{value:"GetForeignRelSize",id:"getforeignrelsize",level:4},{value:"GetForeignPaths",id:"getforeignpaths",level:4},{value:"GetForeignPlan",id:"getforeignplan",level:4},{value:"BeginForeignScan",id:"beginforeignscan",level:4},{value:"IterateForeignScan",id:"iterateforeignscan",level:4},{value:"ReScanForeignScan",id:"rescanforeignscan",level:4},{value:"EndForeignScan",id:"endforeignscan",level:4},{value:"Optional update-related callbacks",id:"optional-update-related-callbacks",level:3},{value:"ExecForeignInsert",id:"execforeigninsert",level:4},{value:"ExecForeignUpdate",id:"execforeignupdate",level:4},{value:"ExecForeignDelete",id:"execforeigndelete",level:4},{value:"Apache Cloudberry considerations",id:"apache-cloudberry-considerations",level:2},{value:"The mpp_execute option",id:"the-mpp_execute-option",level:3},{value:"Segment identification",id:"segment-identification",level:3},{value:"Parallel write operations",id:"parallel-write-operations",level:3},{value:"Example FDW implementation",id:"example-fdw-implementation",level:2},{value:"Building and packaging",id:"building-and-packaging",level:2},{value:"Using PGXS",id:"using-pgxs",level:3},{value:"Creating an extension",id:"creating-an-extension",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Testing your FDW",id:"testing-your-fdw",level:2},{value:"Basic functionality test",id:"basic-functionality-test",level:3},{value:"Parallel execution test",id:"parallel-execution-test",level:3},{value:"Best practices",id:"best-practices",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Enable verbose logging",id:"enable-verbose-logging",level:3},{value:"Use elog for debugging",id:"use-elog-for-debugging",level:3},{value:"Common issues",id:"common-issues",level:3},{value:"Learn more",id:"learn-more",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"write-a-foreign-data-wrapper",children:"Write a Foreign Data Wrapper"}),"\n",(0,r.jsx)(n.p,{children:"This guide outlines how to write a new foreign data wrapper (FDW) for Apache Cloudberry. A foreign data wrapper is a library that consists of a set of functions that the Apache Cloudberry server calls to access external data sources. The FDW is responsible for fetching data from remote data stores and returning it to the Apache Cloudberry executor."}),"\n",(0,r.jsx)(n.p,{children:"FDWs enable Apache Cloudberry to treat external data sources as if they were regular database tables, allowing you to query external data using standard SQL."}),"\n",(0,r.jsx)(n.h2,{id:"before-you-begin",children:"Before you begin"}),"\n",(0,r.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsx)(n.p,{children:"When developing with the Apache Cloudberry foreign data wrapper API:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Your development system must have the same hardware and software architecture as your Apache Cloudberry hosts"}),"\n",(0,r.jsx)(n.li,{children:"Code must be written in a compiled language such as C, using the version-1 interface"}),"\n",(0,r.jsx)(n.li,{children:"Symbol names in your object files must not conflict with each other or with symbols defined in the Apache Cloudberry server"}),"\n",(0,r.jsxs)(n.li,{children:["You should be familiar with the foreign table concepts described in ",(0,r.jsx)(n.a,{href:"/docs/external/g-foreign.html",children:"Accessing External Data with Foreign Tables"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"header-files",children:"Header files"}),"\n",(0,r.jsxs)(n.p,{children:["The Apache Cloudberry header files for FDW development are located in ",(0,r.jsx)(n.code,{children:"$GPHOME/include/postgresql/server/"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"foreign/fdwapi.h"})," - FDW API structures and callback function signatures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"foreign/foreign.h"})," - Foreign data wrapper helper structs and functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"catalog/pg_foreign_table.h"})," - Foreign table definition"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"catalog/pg_foreign_server.h"})," - Foreign server definition"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"fdw-architecture",children:"FDW architecture"}),"\n",(0,r.jsx)(n.p,{children:"An FDW consists of two main components:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"A handler function that returns a struct containing function pointers to all the callback functions needed by Apache Cloudberry to interact with the external data source."}),"\n",(0,r.jsxs)(n.li,{children:["An optional validator function that validates configuration options provided in ",(0,r.jsx)(n.code,{children:"CREATE"})," and ",(0,r.jsx)(n.code,{children:"ALTER"})," commands for the foreign data wrapper, servers, user mappings, and foreign tables."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"handler-function",children:"Handler function"}),"\n",(0,r.jsx)(n.p,{children:"The handler function is SQL-invokable and returns a struct containing pointers to callback functions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"CREATE FUNCTION my_fdw_handler()\n  RETURNS fdw_handler\n  AS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"validator-function",children:"Validator function"}),"\n",(0,r.jsx)(n.p,{children:"The validator function validates options for FDW objects:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"CREATE FUNCTION my_fdw_validator(text[], oid)\n  RETURNS void\n  AS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"callback-functions",children:"Callback functions"}),"\n",(0,r.jsxs)(n.p,{children:["The FDW API defines callback functions that Apache Cloudberry invokes when scanning and updating foreign tables. The handler function returns a ",(0,r.jsx)(n.code,{children:"FdwRoutine"})," struct containing pointers to these functions."]}),"\n",(0,r.jsx)(n.h3,{id:"required-scan-related-callbacks",children:"Required scan-related callbacks"}),"\n",(0,r.jsx)(n.p,{children:"These functions are required for all FDWs:"}),"\n",(0,r.jsx)(n.h4,{id:"getforeignrelsize",children:"GetForeignRelSize"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void GetForeignRelSize(PlannerInfo *root,\n                       RelOptInfo *baserel,\n                       Oid foreigntableid)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Obtain relation size estimates for a foreign table. Called at the beginning of planning."}),"\n",(0,r.jsx)(n.h4,{id:"getforeignpaths",children:"GetForeignPaths"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void GetForeignPaths(PlannerInfo *root,\n                     RelOptInfo *baserel,\n                     Oid foreigntableid)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create possible access paths for a scan on a foreign table. Must call ",(0,r.jsx)(n.code,{children:"create_foreignscan_path()"})," for Apache Cloudberry compatibility."]}),"\n",(0,r.jsx)(n.h4,{id:"getforeignplan",children:"GetForeignPlan"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"ForeignScan *GetForeignPlan(PlannerInfo *root,\n                            RelOptInfo *baserel,\n                            Oid foreigntableid,\n                            ForeignPath *best_path,\n                            List *tlist,\n                            List *scan_clauses)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create a ForeignScan plan node from the selected foreign access path."}),"\n",(0,r.jsx)(n.h4,{id:"beginforeignscan",children:"BeginForeignScan"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void BeginForeignScan(ForeignScanState *node,\n                      int eflags)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Begin executing a foreign scan. Called during executor startup."}),"\n",(0,r.jsx)(n.h4,{id:"iterateforeignscan",children:"IterateForeignScan"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"TupleTableSlot *IterateForeignScan(ForeignScanState *node)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Fetch one row from the foreign source. Return NULL when no more rows are available."}),"\n",(0,r.jsx)(n.h4,{id:"rescanforeignscan",children:"ReScanForeignScan"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void ReScanForeignScan(ForeignScanState *node)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Restart the scan from the beginning."}),"\n",(0,r.jsx)(n.h4,{id:"endforeignscan",children:"EndForeignScan"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void EndForeignScan(ForeignScanState *node)\n"})}),"\n",(0,r.jsx)(n.p,{children:"End the scan and release resources."}),"\n",(0,r.jsx)(n.h3,{id:"optional-update-related-callbacks",children:"Optional update-related callbacks"}),"\n",(0,r.jsx)(n.p,{children:"If your FDW supports write operations, implement these functions:"}),"\n",(0,r.jsx)(n.h4,{id:"execforeigninsert",children:"ExecForeignInsert"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"TupleTableSlot *ExecForeignInsert(EState *estate,\n                                  ResultRelInfo *rinfo,\n                                  TupleTableSlot *slot,\n                                  TupleTableSlot *planSlot)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Insert a single tuple into the foreign table."}),"\n",(0,r.jsx)(n.h4,{id:"execforeignupdate",children:"ExecForeignUpdate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"TupleTableSlot *ExecForeignUpdate(EState *estate,\n                                  ResultRelInfo *rinfo,\n                                  TupleTableSlot *slot,\n                                  TupleTableSlot *planSlot)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Update a single tuple in the foreign table."}),"\n",(0,r.jsx)(n.h4,{id:"execforeigndelete",children:"ExecForeignDelete"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"TupleTableSlot *ExecForeignDelete(EState *estate,\n                                  ResultRelInfo *rinfo,\n                                  TupleTableSlot *slot,\n                                  TupleTableSlot *planSlot)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Delete a single tuple from the foreign table."}),"\n",(0,r.jsx)(n.h2,{id:"apache-cloudberry-considerations",children:"Apache Cloudberry considerations"}),"\n",(0,r.jsx)(n.h3,{id:"the-mpp_execute-option",children:"The mpp_execute option"}),"\n",(0,r.jsxs)(n.p,{children:["Apache Cloudberry supports parallel execution through the ",(0,r.jsx)(n.code,{children:"mpp_execute"})," option. Your FDW should handle this option to determine where to request or send data:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"ForeignTable *table = GetForeignTable(foreigntableid);\nif (table->exec_location == FTEXECLOCATION_ALL_SEGMENTS)\n{\n    // Execute on all segments in parallel\n}\nelse if (table->exec_location == FTEXECLOCATION_ANY)\n{\n    // Execute on coordinator or any one segment\n}\nelse if (table->exec_location == FTEXECLOCATION_COORDINATOR)\n{\n    // Execute on coordinator only (default)\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"segment-identification",children:"Segment identification"}),"\n",(0,r.jsxs)(n.p,{children:["For parallel execution (",(0,r.jsx)(n.code,{children:"mpp_execute 'all segments'"}),"), each segment must determine which portion of the data is its responsibility:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int segmentNumber = GpIdentity.segindex;\nint totalNumberOfSegments = getgpsegmentCount();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parallel-write-operations",children:"Parallel write operations"}),"\n",(0,r.jsxs)(n.p,{children:["Apache Cloudberry supports parallel write operations only when ",(0,r.jsx)(n.code,{children:"mpp_execute"})," is set to ",(0,r.jsx)(n.code,{children:"'all segments'"}),". For other settings, write operations are initiated through the coordinator."]}),"\n",(0,r.jsx)(n.h2,{id:"example-fdw-implementation",children:"Example FDW implementation"}),"\n",(0,r.jsx)(n.p,{children:"Here's a basic skeleton for an FDW:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include "postgres.h"\n#include "foreign/fdwapi.h"\n#include "foreign/foreign.h"\n\nPG_MODULE_MAGIC;\n\n// Function declarations\nextern Datum my_fdw_handler(PG_FUNCTION_ARGS);\nextern Datum my_fdw_validator(PG_FUNCTION_ARGS);\n\n// FDW callback functions\nstatic void myGetForeignRelSize(PlannerInfo *root,\n                                RelOptInfo *baserel,\n                                Oid foreigntableid);\nstatic void myGetForeignPaths(PlannerInfo *root,\n                              RelOptInfo *baserel,\n                              Oid foreigntableid);\n// ... other callback functions\n\nPG_FUNCTION_INFO_V1(my_fdw_handler);\nDatum\nmy_fdw_handler(PG_FUNCTION_ARGS)\n{\n    FdwRoutine *fdwroutine = makeNode(FdwRoutine);\n\n    // Required scan functions\n    fdwroutine->GetForeignRelSize = myGetForeignRelSize;\n    fdwroutine->GetForeignPaths = myGetForeignPaths;\n    fdwroutine->GetForeignPlan = myGetForeignPlan;\n    fdwroutine->BeginForeignScan = myBeginForeignScan;\n    fdwroutine->IterateForeignScan = myIterateForeignScan;\n    fdwroutine->ReScanForeignScan = myReScanForeignScan;\n    fdwroutine->EndForeignScan = myEndForeignScan;\n\n    // Optional write functions\n    fdwroutine->ExecForeignInsert = myExecForeignInsert;\n    fdwroutine->ExecForeignUpdate = myExecForeignUpdate;\n    fdwroutine->ExecForeignDelete = myExecForeignDelete;\n\n    PG_RETURN_POINTER(fdwroutine);\n}\n\nPG_FUNCTION_INFO_V1(my_fdw_validator);\nDatum\nmy_fdw_validator(PG_FUNCTION_ARGS)\n{\n    List *options_list = untransformRelOptions(PG_GETARG_DATUM(0));\n    Oid catalog = PG_GETARG_OID(1);\n    \n    // Validate options based on catalog type\n    // Implementation depends on your FDW\'s specific options\n    \n    PG_RETURN_VOID();\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"building-and-packaging",children:"Building and packaging"}),"\n",(0,r.jsx)(n.h3,{id:"using-pgxs",children:"Using PGXS"}),"\n",(0,r.jsx)(n.p,{children:"Create a Makefile using the PostgreSQL build extension infrastructure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"MODULE_big = my_fdw\nOBJS = my_fdw.o\n\nPG_CONFIG = pg_config\nPGXS := $(shell $(PG_CONFIG) --pgxs)\n\nPG_CPPFLAGS = -I$(shell $(PG_CONFIG) --includedir)\nSHLIB_LINK = -L$(shell $(PG_CONFIG) --libdir)\ninclude $(PGXS)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"creating-an-extension",children:"Creating an extension"}),"\n",(0,r.jsxs)(n.p,{children:["Create SQL script file (",(0,r.jsx)(n.code,{children:"my_fdw--1.0.sql"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE FUNCTION my_fdw_handler()\n  RETURNS fdw_handler\n  AS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n\nCREATE FUNCTION my_fdw_validator(text[], oid)\n  RETURNS void\n  AS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n\nCREATE FOREIGN DATA WRAPPER my_fdw\n  HANDLER my_fdw_handler\n  VALIDATOR my_fdw_validator;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create control file (",(0,r.jsx)(n.code,{children:"my_fdw.control"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"# my_fdw extension\ncomment = 'My custom foreign data wrapper'\ndefault_version = '1.0'\nmodule_pathname = '$libdir/my_fdw'\nrelocatable = true\n"})}),"\n",(0,r.jsx)(n.p,{children:"Update Makefile for extension:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"EXTENSION = my_fdw\nDATA = my_fdw--1.0.sql\n"})}),"\n",(0,r.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,r.jsx)(n.p,{children:"For Apache Cloudberry clusters:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Install shared library to ",(0,r.jsx)(n.code,{children:"$GPHOME/lib/postgresql/"})," on all hosts."]}),"\n",(0,r.jsxs)(n.li,{children:["Install extension files to ",(0,r.jsx)(n.code,{children:"$GPHOME/share/postgresql/extension/"})," on all hosts."]}),"\n",(0,r.jsxs)(n.li,{children:["Set permissions so ",(0,r.jsx)(n.code,{children:"gpadmin"})," user can access all files."]}),"\n",(0,r.jsx)(n.li,{children:"Install on all hosts - coordinator and all segment hosts."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing-your-fdw",children:"Testing your FDW"}),"\n",(0,r.jsx)(n.h3,{id:"basic-functionality-test",children:"Basic functionality test"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create extension\nCREATE EXTENSION my_fdw;\n\n-- Create foreign server\nCREATE SERVER my_server\n    FOREIGN DATA WRAPPER my_fdw\n    OPTIONS (host 'remote-host', port '5432');\n\n-- Create user mapping\nCREATE USER MAPPING FOR current_user\n    SERVER my_server\n    OPTIONS (user 'remote_user', password 'remote_password');\n\n-- Create foreign table\nCREATE FOREIGN TABLE my_foreign_table (\n    id integer,\n    name text\n) SERVER my_server\nOPTIONS (table_name 'remote_table');\n\n-- Test query\nSELECT * FROM my_foreign_table LIMIT 5;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parallel-execution-test",children:"Parallel execution test"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Test parallel execution\nCREATE FOREIGN TABLE parallel_test (\n    id integer,\n    data text\n) SERVER my_server\nOPTIONS (\n    table_name 'large_table',\n    mpp_execute 'all segments'\n);\n\nSELECT count(*) FROM parallel_test;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement comprehensive error handling throughout your FDW code, ensuring that all failure modes are properly reported to users with clear, actionable error messages."}),"\n",(0,r.jsx)(n.li,{children:"Use PostgreSQL memory contexts correctly to prevent memory leaks and ensure proper cleanup when queries are cancelled or encounter errors."}),"\n",(0,r.jsx)(n.li,{children:"Design your FDW to handle bulk data operations efficiently and take advantage of Apache Cloudberry's parallel processing capabilities where appropriate."}),"\n",(0,r.jsx)(n.li,{children:"Validate all user inputs and configuration parameters, implement secure authentication mechanisms, and follow security best practices for external data access."}),"\n",(0,r.jsx)(n.li,{children:"Create thorough documentation that explains all configuration options, connection parameters, and usage examples for administrators and developers."}),"\n",(0,r.jsx)(n.li,{children:"Develop comprehensive test suites that cover various data types, edge cases, error conditions, and performance scenarios across different external data sources."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,r.jsx)(n.h3,{id:"enable-verbose-logging",children:"Enable verbose logging"}),"\n",(0,r.jsx)(n.p,{children:"Set in postgresql.conf:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"log_min_messages = DEBUG1\n"})}),"\n",(0,r.jsx)(n.h3,{id:"use-elog-for-debugging",children:"Use elog for debugging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'elog(DEBUG1, "FDW: Processing %d rows", row_count);\nelog(WARNING, "FDW: Connection failed, retrying...");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Segmentation faults frequently occur due to improper memory management, such as accessing freed memory or buffer overruns in C code."}),"\n",(0,r.jsx)(n.li,{children:"Symbol name conflicts can arise when multiple extensions define functions with the same names; ensure all function names are unique and properly namespaced."}),"\n",(0,r.jsx)(n.li,{children:"Parallel execution issues are often difficult to debug; start testing with single-segment configurations before enabling multi-segment parallel processing."}),"\n",(0,r.jsx)(n.li,{children:"Performance bottlenecks may appear in data conversion or network operations; use profiling tools to identify and optimize critical code paths."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"learn-more",children:"Learn more"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/12/fdw-helpers.html",children:"Foreign Data Wrapper Helper Functions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/12/fdw-callbacks.html",children:"Foreign Data Wrapper Callback Routines"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>l});var r=i(67294);const a={},t=r.createContext(a);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);