"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[55825],{22260:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var r=s(85893),i=s(11151);const t={title:"GPORCA Overview"},a="GPORCA overview",o={id:"performance/optimize-queries/use-orca/use-orca-overview",title:"GPORCA Overview",description:"GPORCA is an enhanced query optimizer built on top of the PostgreSQL planner, designed to improve query planning and optimization. It offers high scalability and delivers more efficient optimization, especially on multi-core architectures. Apache Cloudberry uses GPORCA by default to generate query execution plans when supported.",source:"@site/versioned_docs/version-2.x/performance/optimize-queries/use-orca/use-orca-overview.md",sourceDirName:"performance/optimize-queries/use-orca",slug:"/performance/optimize-queries/use-orca/use-orca-overview",permalink:"/docs/performance/optimize-queries/use-orca/use-orca-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/performance/optimize-queries/use-orca/use-orca-overview.md",tags:[],version:"2.x",lastUpdatedBy:"TomShawn",lastUpdatedAt:1750137774,formattedLastUpdatedAt:"Jun 17, 2025",frontMatter:{title:"GPORCA Overview"},sidebar:"docsbars",previous:{title:"Analyze Query Performance",permalink:"/docs/performance/optimize-queries/analyze-query-performance"},next:{title:"GPORCA Features and Enhancements",permalink:"/docs/performance/optimize-queries/use-orca/orca-features"}},l={},c=[{value:"Enable or disable GPORCA",id:"enable-or-disable-gporca",level:2},{value:"Enable GPORCA system-wide",id:"enable-gporca-system-wide",level:3},{value:"Enable GPORCA for a database",id:"enable-gporca-for-a-database",level:3},{value:"Enable GPORCA for a session or query",id:"enable-gporca-for-a-session-or-query",level:3},{value:"Determine which query optimizer is used",id:"determine-which-query-optimizer-is-used",level:2},{value:"Example",id:"example",level:3}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"gporca-overview",children:"GPORCA overview"}),"\n",(0,r.jsx)(n.p,{children:"GPORCA is an enhanced query optimizer built on top of the PostgreSQL planner, designed to improve query planning and optimization. It offers high scalability and delivers more efficient optimization, especially on multi-core architectures. Apache Cloudberry uses GPORCA by default to generate query execution plans when supported."}),"\n",(0,r.jsx)(n.p,{children:"GPORCA significantly enhances query performance in the following areas:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Queries on partitioned tables"}),"\n",(0,r.jsx)(n.li,{children:"Queries with common table expressions (CTEs)"}),"\n",(0,r.jsx)(n.li,{children:"Queries with subqueries"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In Apache Cloudberry, GPORCA and the PostgreSQL-based planner coexist. By default, the system first attempts to use GPORCA. If GPORCA does not support a particular query, the system automatically falls back to the PostgreSQL optimizer."}),"\n",(0,r.jsx)(n.p,{children:"The following diagram illustrates GPORCA's role in the overall query planning architecture:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Query Architecture",src:s(95882).Z+"",width:"624",height:"298"})}),"\n",(0,r.jsx)(n.p,{children:"Note that all server parameters used to configure PostgreSQL planner behavior are ignored when GPORCA is enabled. These parameters only take effect if the system falls back to using the PostgreSQL optimizer."}),"\n",(0,r.jsx)(n.h2,{id:"enable-or-disable-gporca",children:"Enable or disable GPORCA"}),"\n",(0,r.jsxs)(n.p,{children:["You can enable or disable GPORCA using the ",(0,r.jsx)(n.code,{children:"optimizer"})," server configuration parameter."]}),"\n",(0,r.jsxs)(n.p,{children:["Although GPORCA is enabled by default, you can configure the ",(0,r.jsx)(n.code,{children:"optimizer"})," parameter at the system, database, session, or query level to control whether GPORCA is used."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"optimizer"})," parameter enables or disables GPORCA."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"optimizer_control"})," parameter determines whether changes to ",(0,r.jsx)(n.code,{children:"optimizer"})," are allowed. If ",(0,r.jsx)(n.code,{children:"optimizer_control"})," is set to ",(0,r.jsx)(n.code,{children:"off"}),", any attempt to modify ",(0,r.jsx)(n.code,{children:"optimizer"})," will result in an error. To allow changes, set ",(0,r.jsx)(n.code,{children:"optimizer_control"})," to ",(0,r.jsx)(n.code,{children:"on"}),"."]}),"\n"]})}),"\n",(0,r.jsx)(n.h3,{id:"enable-gporca-system-wide",children:"Enable GPORCA system-wide"}),"\n",(0,r.jsxs)(n.p,{children:["You can enable GPORCA across the entire system by setting the ",(0,r.jsx)(n.code,{children:"optimizer"})," server parameter."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Log in to the primary node as the Apache Cloudberry administrator user ",(0,r.jsx)(n.code,{children:"gpadmin"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Run the following ",(0,r.jsx)(n.code,{children:"gpconfig"})," command to set the parameter to ",(0,r.jsx)(n.code,{children:"on"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"gpconfig -c optimizer -v on --coordinatoronly\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Reload the configuration to apply changes without restarting the system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"gpstop -u\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"enable-gporca-for-a-database",children:"Enable GPORCA for a database"}),"\n",(0,r.jsxs)(n.p,{children:["You can enable GPORCA for a specific database using the ",(0,r.jsx)(n.code,{children:"ALTER DATABASE"})," command. The following example enables GPORCA for the ",(0,r.jsx)(n.em,{children:"test_db"})," database:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"ALTER DATABASE test_db SET optimizer = on;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"enable-gporca-for-a-session-or-query",children:"Enable GPORCA for a session or query"}),"\n",(0,r.jsxs)(n.p,{children:["You can enable GPORCA in the current session using the ",(0,r.jsx)(n.code,{children:"SET"})," command. For example, after connecting to Apache Cloudberry via ",(0,r.jsx)(n.code,{children:"psql"}),", run:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET optimizer = on;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To enable GPORCA for a single query only, run the above ",(0,r.jsx)(n.code,{children:"SET"})," command just before executing the query."]}),"\n",(0,r.jsx)(n.h2,{id:"determine-which-query-optimizer-is-used",children:"Determine which query optimizer is used"}),"\n",(0,r.jsxs)(n.p,{children:["When GPORCA is enabled (which is the default), you can determine whether Apache Cloudberry is using GPORCA or has fallen back to the PostgreSQL planner by inspecting the ",(0,r.jsx)(n.code,{children:"EXPLAIN"})," output."]}),"\n",(0,r.jsx)(n.p,{children:"The most straightforward method is to look at the end of the query plan:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The optimizer used is indicated at the end of the plan. For example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If the plan is generated by GPORCA, it shows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"Optimizer: GPORCA\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If the plan is generated by the PostgreSQL planner, it shows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"Optimizer: Postgres-based planner\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If the plan includes nodes such as ",(0,r.jsx)(n.code,{children:"Dynamic <any> Scan"})," (e.g., Dynamic Assert, Dynamic Sequence, Dynamic Index Scan), it was generated by GPORCA. The PostgreSQL planner does not produce these node types."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["For partitioned table queries, GPORCA's ",(0,r.jsx)(n.code,{children:"EXPLAIN"})," output only displays the number of pruned partitions, without listing them individually. In contrast, the PostgreSQL planner lists every scanned partition."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to the ",(0,r.jsx)(n.code,{children:"EXPLAIN"})," output, the optimizer type is also recorded in the logs. If GPORCA cannot support a query and falls back to the PostgreSQL planner, the system logs a ",(0,r.jsx)(n.code,{children:"NOTICE"})," with an explanation."]}),"\n",(0,r.jsxs)(n.p,{children:["You can also enable the ",(0,r.jsx)(n.code,{children:"optimizer_trace_fallback"})," parameter to display detailed fallback reasons directly in ",(0,r.jsx)(n.code,{children:"psql"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Setting the server parameter ",(0,r.jsx)(n.code,{children:"optimizer_trace_fallback"})," to ",(0,r.jsx)(n.code,{children:"on"})," allows you to view detailed fallback reasons in the command-line interface when GPORCA falls back."]})}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"The following example demonstrates the behavior of a query on a partitioned table when GPORCA is enabled."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CREATE TABLE"})," statement below creates a range-partitioned table based on the ",(0,r.jsx)(n.code,{children:"date"})," column:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE sales (trans_id int, date date, \n    amount decimal(9,2), region text)\n   DISTRIBUTED BY (trans_id)\n   PARTITION BY RANGE (date)\n      (START (date '2016-01-01') \n       INCLUSIVE END (date '2017-01-01') \n       EXCLUSIVE EVERY (INTERVAL '1 month'),\n   DEFAULT PARTITION outlying_dates );\n"})}),"\n",(0,r.jsx)(n.p,{children:"The plan generated by GPORCA only shows the number of selected partitions, without listing their names:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"->  Partition Selector for sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=50 width=4)\n      Partitions selected:  13 (out of 13)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If a particular partitioned table query is not supported by GPORCA, the system automatically falls back to the PostgreSQL optimizer. In such cases, the ",(0,r.jsx)(n.code,{children:"EXPLAIN"})," output lists all accessed partitions. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"->  Append  (cost=0.00..0.00 rows=26 width=53)\n   ->  Seq Scan on sales2_1_prt_7_2_prt_usa sales2  (cost=0.00..0.00 rows=1 width=53)\n   ->  Seq Scan on sales2_1_prt_7_2_prt_asia sales2  (cost=0.00..0.00 rows=1 width=53)\n   ...\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following example shows the log output when a query falls back to the PostgreSQL optimizer:"}),"\n",(0,r.jsx)(n.p,{children:"Run the following query:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SELECT * FROM pg_class;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The system uses the PostgreSQL planner and logs a ",(0,r.jsx)(n.code,{children:"NOTICE"})," message indicating why GPORCA did not handle the query:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner\nDETAIL:  Falling back to Postgres-based planner because GPORCA does not support the following feature: Non-default collation\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},95882:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/orca-architecture-a6ff4d76d6b7bedc5188fe9d3f571eca.png"},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var r=s(67294);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);