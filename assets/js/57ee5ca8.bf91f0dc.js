"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[1346],{7391:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var r=t(85893),d=t(11151);const n={title:"pg_stat_progress_copy"},c="pg_stat_progress_copy",o={id:"sys-catalogs/sys-views/pg-stat-progress-copy",title:"pg_stat_progress_copy",description:"The pgstatprogress_copy view displays the progress of currently running COPY commands. Each row represents a backend process executing a COPY operation and provides details such as the command type (COPY FROM or COPY TO), I/O type (for example, FILE and PIPE), number of bytes and tuples processed, and counts of tuples excluded or skipped due to errors. This view is useful for monitoring long-running COPY operations.",source:"@site/versioned_docs/version-2.x/sys-catalogs/sys-views/pg-stat-progress-copy.md",sourceDirName:"sys-catalogs/sys-views",slug:"/sys-catalogs/sys-views/pg-stat-progress-copy",permalink:"/docs/sys-catalogs/sys-views/pg-stat-progress-copy",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/sys-catalogs/sys-views/pg-stat-progress-copy.md",tags:[],version:"2.x",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1756694033,formattedLastUpdatedAt:"Sep 1, 2025",frontMatter:{title:"pg_stat_progress_copy"},sidebar:"docsbars",previous:{title:"pg_stat_progress_cluster",permalink:"/docs/sys-catalogs/sys-views/pg-stat-progress-cluster"},next:{title:"pg_stat_progress_create_index",permalink:"/docs/sys-catalogs/sys-views/pg-stat-progress-create-index"}},i={},l=[];function a(e){const s={code:"code",h1:"h1",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"pg_stat_progress_copy",children:"pg_stat_progress_copy"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"pg_stat_progress_copy"})," view displays the progress of currently running ",(0,r.jsx)(s.code,{children:"COPY"})," commands. Each row represents a backend process executing a ",(0,r.jsx)(s.code,{children:"COPY"})," operation and provides details such as the command type (",(0,r.jsx)(s.code,{children:"COPY FROM"})," or ",(0,r.jsx)(s.code,{children:"COPY TO"}),"), I/O type (for example, ",(0,r.jsx)(s.code,{children:"FILE"})," and ",(0,r.jsx)(s.code,{children:"PIPE"}),"), number of bytes and tuples processed, and counts of tuples excluded or skipped due to errors. This view is useful for monitoring long-running ",(0,r.jsx)(s.code,{children:"COPY"})," operations."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Column"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"gp_segment_id"})}),(0,r.jsx)(s.td,{children:"integer"}),(0,r.jsxs)(s.td,{children:["Unique identifier of a segment (or coordinator) instance. (This column is not present in the ",(0,r.jsx)(s.code,{children:"gp_stat_progress_copy_summary"})," view.)"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"pid"})}),(0,r.jsx)(s.td,{children:"integer"}),(0,r.jsxs)(s.td,{children:["Process identifier of the backend, or the coordinator process identifier if the ",(0,r.jsx)(s.code,{children:"gp_stat_progress_copy_summary"})," view."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"datid"})}),(0,r.jsx)(s.td,{children:"oid"}),(0,r.jsx)(s.td,{children:"The object identifier of the database to which this backend is connected."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"datname"})}),(0,r.jsx)(s.td,{children:"name"}),(0,r.jsx)(s.td,{children:"Name of the database to which this backend is connected."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"relid"})}),(0,r.jsx)(s.td,{children:"oid"}),(0,r.jsxs)(s.td,{children:["The object identifier of the table on which the ",(0,r.jsx)(s.code,{children:"COPY"})," command is executed. It is set to ",(0,r.jsx)(s.code,{children:"0"})," if copying from a ",(0,r.jsx)(s.code,{children:"SELECT"})," query."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"command"})}),(0,r.jsx)(s.td,{children:"text"}),(0,r.jsxs)(s.td,{children:["The command that is running: ",(0,r.jsx)(s.code,{children:"COPY FROM"}),", ",(0,r.jsx)(s.code,{children:"COPY TO"}),", ",(0,r.jsx)(s.code,{children:"COPY FROM ON SEGMENT"}),", or ",(0,r.jsx)(s.code,{children:"COPY TO ON SEGMENT"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"type"})}),(0,r.jsx)(s.td,{children:"text"}),(0,r.jsxs)(s.td,{children:["The io type that the data is read from or written to: ",(0,r.jsx)(s.code,{children:"FILE"}),", ",(0,r.jsx)(s.code,{children:"PROGRAM"}),", ",(0,r.jsx)(s.code,{children:"PIPE"})," (for ",(0,r.jsx)(s.code,{children:"COPY FROM STDIN"})," and ",(0,r.jsx)(s.code,{children:"COPY TO STDOUT"}),"), or ",(0,r.jsx)(s.code,{children:"CALLBACK"})," (used for example during the initial table synchronization in logical replication)."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"bytes_processed"})}),(0,r.jsx)(s.td,{children:"bigint"}),(0,r.jsxs)(s.td,{children:["Number of bytes already processed by ",(0,r.jsx)(s.code,{children:"COPY"})," command."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"bytes_total"})}),(0,r.jsx)(s.td,{children:"bigint"}),(0,r.jsxs)(s.td,{children:["Size of source file for ",(0,r.jsx)(s.code,{children:"COPY FROM"})," command in bytes. It is set to ",(0,r.jsx)(s.code,{children:"0"})," if not available."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"tuples_processed"})}),(0,r.jsx)(s.td,{children:"bigint"}),(0,r.jsxs)(s.td,{children:["Number of tuples already processed by ",(0,r.jsx)(s.code,{children:"COPY"})," command."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"tuples_excluded"})}),(0,r.jsx)(s.td,{children:"bigint"}),(0,r.jsxs)(s.td,{children:["Number of tuples not processed because they were excluded by the ",(0,r.jsx)(s.code,{children:"WHERE"})," clause of the ",(0,r.jsx)(s.code,{children:"COPY"})," command."]})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,d.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},11151:(e,s,t)=>{t.d(s,{Z:()=>o,a:()=>c});var r=t(67294);const d={},n=r.createContext(d);function c(e){const s=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),r.createElement(n.Provider,{value:s},e.children)}}}]);