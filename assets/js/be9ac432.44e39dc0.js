"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[75241],{32158:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(85893),s=a(11151);const i={title:"Identify and Mitigate Heap Table Performance Issues"},r="Identify and Mitigate Heap Table Performance Issues",o={id:"tutorials/best-practices/identify-and-mitigate-heap-table-performance-issues",title:"Identify and Mitigate Heap Table Performance Issues",description:"Symptom:",source:"@site/docs/tutorials/best-practices/identify-and-mitigate-heap-table-performance-issues.md",sourceDirName:"tutorials/best-practices",slug:"/tutorials/best-practices/identify-and-mitigate-heap-table-performance-issues",permalink:"/docs/next/tutorials/best-practices/identify-and-mitigate-heap-table-performance-issues",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/docs/tutorials/best-practices/identify-and-mitigate-heap-table-performance-issues.md",tags:[],version:"current",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1761720050,formattedLastUpdatedAt:"Oct 29, 2025",frontMatter:{title:"Identify and Mitigate Heap Table Performance Issues"},sidebar:"docsbars",previous:{title:"Manage Bloat in a Database",permalink:"/docs/next/tutorials/best-practices/manage-bloat"},next:{title:"Security",permalink:"/docs/next/tutorials/best-practices/security-best-practices"}},d={},c=[];function l(e){const t={code:"code",h1:"h1",li:"li",ol:"ol",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"identify-and-mitigate-heap-table-performance-issues",children:"Identify and Mitigate Heap Table Performance Issues"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Symptom"}),":"]}),"\n",(0,n.jsx)(t.p,{children:"The first scan of tuples after bulk data load, modification, or deletion jobs on heap tables are running slow or hanging."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Potential Cause"}),":"]}),"\n",(0,n.jsxs)(t.p,{children:["When a workload involves a bulk load, modification, or deletion of data in a heap table, the first scan post-operation may generate a large amount of WAL data when checksums are enabled (",(0,n.jsx)(t.code,{children:"data_check_sums=true"}),") or hint bits are logged (",(0,n.jsx)(t.code,{children:"wal_log_hints=true"}),"), leading to slow or hung jobs."]}),"\n",(0,n.jsxs)(t.p,{children:["Affected workloads include: restoring from a backup, loading data with ",(0,n.jsx)(t.code,{children:"gpcopy"})," or ",(0,n.jsx)(t.code,{children:"COPY"}),", cluster expansion, ",(0,n.jsx)(t.code,{children:"CTAS"}),"/",(0,n.jsx)(t.code,{children:"INSERT"}),"/",(0,n.jsx)(t.code,{children:"UPDATE"}),"/",(0,n.jsx)(t.code,{children:"DELETE"})," operations, and ",(0,n.jsx)(t.code,{children:"ALTER TABLE"})," operations that modify tuples."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Explanation"}),":"]}),"\n",(0,n.jsxs)(t.p,{children:["Apache Cloudberry uses hint bits to mark tuples as created and/or deleted by transactions. Hint bits, when set, can help in determining visibility of tuples without expensive ",(0,n.jsx)(t.code,{children:"pg_xact"})," and ",(0,n.jsx)(t.code,{children:"pg_subtrans"})," commit log lookups."]}),"\n",(0,n.jsx)(t.p,{children:"Hint bits are updated for every tuple on the first scan of the tuple after its creation or deletion. Because hint bits are checked and set on a per-tuple basis, even a read can result in heavy writes. When data checksums are enabled for heap tables (the default), hint bit updates are always WAL-logged."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Solution"}),":"]}),"\n",(0,n.jsxs)(t.p,{children:["If you have restored or loaded a complete database comprised primarily of heap tables, you may choose to run ",(0,n.jsx)(t.code,{children:"VACUUM"})," against the entire database."]}),"\n",(0,n.jsx)(t.p,{children:"Alternatively, if you can identify the individual tables affected, you have two options:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Schedule and take a maintenance window and run ",(0,n.jsx)(t.code,{children:"VACUUM"})," on the specific tables that have been loaded, updated, or deleted in bulk. This operation should scan all of the tuples and set and WAL-log the hint bits, taking the performance hit up-front."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Run ",(0,n.jsx)(t.code,{children:"SELECT count(*) FROM <table-name>"})," on each table. This operation similarly scans all of the tuples and sets and WAL-logs the hint bits."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"All subsequent scans as part of regular workloads on the tables should not be required to generate hints or their accompanying full page image WAL records."})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},11151:(e,t,a)=>{a.d(t,{Z:()=>o,a:()=>r});var n=a(67294);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);