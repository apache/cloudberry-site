"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[73078],{47711:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>c});var i=t(85893),s=t(11151);const d={title:"Work with View Dependencies"},a="Work with View Dependencies",o={id:"operate-with-data/operate-with-db-objects/work-with-view-dependencies",title:"Work with View Dependencies",description:"If there are view dependencies on a table, you need to use the CASCADE keyword to drop it. Also, you cannot alter the table if there are view dependencies on it. This example shows a view dependency on a table.",source:"@site/docs/operate-with-data/operate-with-db-objects/work-with-view-dependencies.md",sourceDirName:"operate-with-data/operate-with-db-objects",slug:"/operate-with-data/operate-with-db-objects/work-with-view-dependencies",permalink:"/docs/next/operate-with-data/operate-with-db-objects/work-with-view-dependencies",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/docs/operate-with-data/operate-with-db-objects/work-with-view-dependencies.md",tags:[],version:"current",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1749788112,formattedLastUpdatedAt:"Jun 13, 2025",frontMatter:{title:"Work with View Dependencies"},sidebar:"docsbars",previous:{title:"About View Storage",permalink:"/docs/next/operate-with-data/operate-with-db-objects/view-storage"},next:{title:"Create and Manage Materialized Views",permalink:"/docs/next/operate-with-data/operate-with-db-objects/create-and-manage-materialized-views"}},r={},c=[{value:"Find view dependencies",id:"find-view-dependencies",level:2},{value:"Find direct view dependencies on a table",id:"find-direct-view-dependencies-on-a-table",level:3},{value:"Find direct dependencies on a table column",id:"find-direct-dependencies-on-a-table-column",level:3},{value:"List view schemas",id:"list-view-schemas",level:3},{value:"List view definitions",id:"list-view-definitions",level:3},{value:"List nested views",id:"list-nested-views",level:3},{value:"Example data",id:"example-data",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"work-with-view-dependencies",children:"Work with View Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["If there are view dependencies on a table, you need to use the ",(0,i.jsx)(n.code,{children:"CASCADE"})," keyword to drop it. Also, you cannot alter the table if there are view dependencies on it. This example shows a view dependency on a table."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t (id integer PRIMARY KEY);\nCREATE VIEW v AS SELECT * FROM t;\n \nDROP TABLE t;\nERROR:  cannot drop table t because other objects depend on it\nDETAIL:  view v depends on table t\nHINT:  Use DROP ... CASCADE to drop the dependent objects too.\n \nALTER TABLE t DROP id;\nERROR:  cannot drop column id of table t because other objects depend on it\nDETAIL:  view v depends on column id of table t\nHINT:  Use DROP ... CASCADE to drop the dependent objects too.\n"})}),"\n",(0,i.jsx)(n.p,{children:"As the previous example shows, altering a table can be quite a challenge if there is a deep hierarchy of views, because you have to create the views in the correct order. You cannot create a view unless all the objects it requires are present."}),"\n",(0,i.jsxs)(n.p,{children:["You can use view dependency information when you want to alter a table that is referenced by a view. For example, you might want to change a table's column data type from ",(0,i.jsx)(n.code,{children:"integer"})," to ",(0,i.jsx)(n.code,{children:"bigint"})," because you realize you need to store larger numbers. However, you cannot do that if there are views that use the column. You first have to drop those views, then change the column and then run all the ",(0,i.jsx)(n.code,{children:"CREATE VIEW"})," statements to create the views again."]}),"\n",(0,i.jsx)(n.h2,{id:"find-view-dependencies",children:"Find view dependencies"}),"\n",(0,i.jsx)(n.p,{children:"The following example queries list view information on dependencies on tables and columns."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#find-direct-view-dependencies-on-a-table",children:"Find direct view dependencies on a table"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#find-direct-dependencies-on-a-table-column",children:"Find direct dependencies on a table column"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#list-view-schemas",children:"List view schemas"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#list-view-definitions",children:"List view definitions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#list-nested-views",children:"List nested views"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The example output is based on the ",(0,i.jsx)(n.a,{href:"#example_data",children:"Example Data"})," at the end of this topic."]}),"\n",(0,i.jsxs)(n.p,{children:["Also, you can use the first example query ",(0,i.jsx)(n.a,{href:"#find-direct-view-dependencies-on-a-table",children:"Find direct view dependencies on a table"})," to find dependencies on user-defined functions (or procedures). The query uses the catalog table ",(0,i.jsx)(n.code,{children:"pg_class"})," that contains information about tables and views. For functions, you can use the catalog table ",(0,i.jsx)(n.code,{children:"pg_proc"})," to get information about functions."]}),"\n",(0,i.jsxs)(n.p,{children:["For detailed information about the system catalog tables that store view information, see ",(0,i.jsx)(n.a,{href:"/docs/next/operate-with-data/operate-with-db-objects/view-storage",children:"About View Storage in Apache Cloudberry"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"find-direct-view-dependencies-on-a-table",children:"Find direct view dependencies on a table"}),"\n",(0,i.jsxs)(n.p,{children:["To find out which views directly depend on table ",(0,i.jsx)(n.code,{children:"t1"}),", create a query that performs a join among the catalog tables that contain the dependency information, and qualify the query to return only view dependencies."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT v.oid::regclass AS view,\n  d.refobjid::regclass AS ref_object    -- name of table\n  -- d.refobjid::regproc AS ref_object  -- name of function\nFROM pg_depend AS d      -- objects that depend on a table\n  JOIN pg_rewrite AS r  -- rules depending on a table\n     ON r.oid = d.objid\n  JOIN pg_class AS v    -- views for the rules\n     ON v.oid = r.ev_class\nWHERE v.relkind = 'v'         -- filter views only\n  -- dependency must be a rule depending on a relation\n  AND d.classid = 'pg_rewrite'::regclass \n  AND d.deptype = 'n'         -- normal dependency\n  -- qualify object\n  AND d.refclassid = 'pg_class'::regclass   -- dependent table\n  AND d.refobjid = 't1'::regclass\n  -- AND d.refclassid = 'pg_proc'::regclass -- dependent function\n  -- AND d.refobjid = 'f'::regproc\n;\n    view    | ref_object\n------------+------------\n v1         | t1\n v2         | t1\n v2         | t1\n v3         | t1\n mytest.vt1 | t1\n mytest.v2a | t1\n mytest.v2a | t1\n(7 rows)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The query performs casts to the ",(0,i.jsx)(n.code,{children:"regclass"})," object identifier type. For information about object identifier types, see the PostgeSQL documentation on ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/14/datatype-oid.html",children:"Object Identifier Types"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In some cases, the views are listed multiple times because the view references multiple table columns. You can remove those duplicates using ",(0,i.jsx)(n.code,{children:"DISTINCT"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can alter the query to find views with direct dependencies on the function ",(0,i.jsx)(n.code,{children:"f"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In the ",(0,i.jsx)(n.code,{children:"SELECT"})," clause replace the name of the table ",(0,i.jsx)(n.code,{children:"d.refobjid::regclass as ref_object"})," with the name of the function ",(0,i.jsx)(n.code,{children:"d.refobjid::regproc as ref_object"})]}),"\n",(0,i.jsxs)(n.li,{children:["In the ",(0,i.jsx)(n.code,{children:"WHERE"})," clause replace the catalog of the referenced object from ",(0,i.jsx)(n.code,{children:"d.refclassid = 'pg_class'::regclass"})," for tables, to ",(0,i.jsx)(n.code,{children:"d.refclassid = 'pg_proc'::regclass"})," for procedures (functions). Also change the object name from ",(0,i.jsx)(n.code,{children:"d.refobjid = 't1'::regclass"})," to ",(0,i.jsx)(n.code,{children:"d.refobjid = 'f'::regproc"})]}),"\n",(0,i.jsxs)(n.li,{children:["In the ",(0,i.jsx)(n.code,{children:"WHERE"})," clause, replace the name of the table ",(0,i.jsx)(n.code,{children:"refobjid = 't1'::regclass"})," with the name of the function ",(0,i.jsx)(n.code,{children:"refobjid = 'f'::regproc"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the example query, the changes have been commented out (prefixed with ",(0,i.jsx)(n.code,{children:"--"}),"). You can comment out the lines for the table and enable the lines for the function."]}),"\n",(0,i.jsx)(n.h3,{id:"find-direct-dependencies-on-a-table-column",children:"Find direct dependencies on a table column"}),"\n",(0,i.jsxs)(n.p,{children:["You can modify the previous query to find those views that depend on a certain table column, which can be useful if you are planning to drop a column (adding a column to the base table is never a problem). The query uses the table column information in the ",(0,i.jsx)(n.code,{children:"pg_attribute"})," catalog table."]}),"\n",(0,i.jsxs)(n.p,{children:["This query finds the views that depend on the column ",(0,i.jsx)(n.code,{children:"id"})," of table ",(0,i.jsx)(n.code,{children:"t1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT v.oid::regclass AS view,\n  d.refobjid::regclass AS ref_object, -- name of table\n  a.attname AS col_name               -- column name\nFROM pg_attribute AS a   -- columns for a table\n  JOIN pg_depend AS d    -- objects that depend on a column\n    ON d.refobjsubid = a.attnum AND d.refobjid = a.attrelid\n  JOIN pg_rewrite AS r   -- rules depending on the column\n    ON r.oid = d.objid\n  JOIN pg_class AS v     -- views for the rules\n    ON v.oid = r.ev_class\nWHERE v.relkind = 'v'    -- filter views only\n  -- dependency must be a rule depending on a relation\n  AND d.classid = 'pg_rewrite'::regclass\n  AND d.refclassid = 'pg_class'::regclass \n  AND d.deptype = 'n'    -- normal dependency\n  AND a.attrelid = 't1'::regclass\n  AND a.attname = 'id'\n;\n    view    | ref_object | col_name\n------------+------------+----------\n v1         | t1         | id\n v2         | t1         | id\n mytest.vt1 | t1         | id\n mytest.v2a | t1         | id\n(4 rows)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-view-schemas",children:"List view schemas"}),"\n",(0,i.jsxs)(n.p,{children:["If you have created views in multiple schemas, you can also list views, each view's schema, and the table referenced by the view. The query retrieves the schema from the catalog table ",(0,i.jsx)(n.code,{children:"pg_namespace"})," and excludes the system schemas ",(0,i.jsx)(n.code,{children:"pg_catalog"}),", ",(0,i.jsx)(n.code,{children:"information_schema"}),", and ",(0,i.jsx)(n.code,{children:"gp_toolkit"}),". Also, the query does not list a view if the view refers to itself."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT v.oid::regclass AS view,\n  ns.nspname AS schema,       -- view schema,\n  d.refobjid::regclass AS ref_object -- name of table\nFROM pg_depend AS d            -- objects that depend on a table\n  JOIN pg_rewrite AS r        -- rules depending on a table\n    ON r.oid = d.objid\n  JOIN pg_class AS v          -- views for the rules\n    ON v.oid = r.ev_class\n  JOIN pg_namespace AS ns     -- schema information\n    ON ns.oid = v.relnamespace\nWHERE v.relkind = 'v'          -- filter views only\n  -- dependency must be a rule depending on a relation\n  AND d.classid = 'pg_rewrite'::regclass \n  AND d.refclassid = 'pg_class'::regclass  -- referenced objects in pg_class -- tables and views\n  AND d.deptype = 'n'         -- normal dependency\n  -- qualify object\n  AND ns.nspname NOT IN ('pg_catalog', 'information_schema', 'gp_toolkit') -- system schemas\n  AND NOT (v.oid = d.refobjid) -- not self-referencing dependency\n;\n    view    | schema | ref_object\n------------+--------+------------\n v1         | public | t1\n v2         | public | t1\n v2         | public | t1\n v2         | public | v1\n v3         | public | t1\n vm1        | public | mytest.tm1\n mytest.vm1 | mytest | t1\n vm2        | public | mytest.tm1\n mytest.v2a | mytest | t1\n mytest.v2a | mytest | t1\n mytest.v2a | mytest | v1\n(11 rows)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-view-definitions",children:"List view definitions"}),"\n",(0,i.jsxs)(n.p,{children:["This query lists the views that depend on ",(0,i.jsx)(n.code,{children:"t1"}),", the column referenced, and the view definition. The ",(0,i.jsx)(n.code,{children:"CREATE VIEW"})," command is created by adding the appropriate text to the view definition."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT v.relname AS view,  \n  d.refobjid::regclass as ref_object,\n  d.refobjsubid as ref_col, \n  'CREATE VIEW ' || v.relname || ' AS ' || pg_get_viewdef(v.oid) AS view_def\nFROM pg_depend AS d\n  JOIN pg_rewrite AS r\n    ON r.oid = d.objid\n  JOIN pg_class AS v\n    ON v.oid = r.ev_class\nWHERE NOT (v.oid = d.refobjid) \n  AND d.refobjid = 't1'::regclass\n  ORDER BY d.refobjsubid\n;\n view | ref_object | ref_col |                  view_def\n------+------------+---------+--------------------------------------------\n v1   | t1         |       1 | CREATE VIEW v1 AS  SELECT max(t1.id) AS id+\n      |            |         |    FROM t1;\n v2a  | t1         |       1 | CREATE VIEW v2a AS  SELECT t1.val         +\n      |            |         |    FROM (t1                               +\n      |            |         |      JOIN v1 USING (id));\n vt1  | t1         |       1 | CREATE VIEW vt1 AS  SELECT t1.id          +\n      |            |         |    FROM t1                                +\n      |            |         |   WHERE (t1.id < 3);\n v2   | t1         |       1 | CREATE VIEW v2 AS  SELECT t1.val          +\n      |            |         |    FROM (t1                               +\n      |            |         |      JOIN v1 USING (id));\n v2a  | t1         |       2 | CREATE VIEW v2a AS  SELECT t1.val         +\n      |            |         |    FROM (t1                               +\n      |            |         |      JOIN v1 USING (id));\n v3   | t1         |       2 | CREATE VIEW v3 AS  SELECT (t1.val || f()) +\n      |            |         |    FROM t1;\n v2   | t1         |       2 | CREATE VIEW v2 AS  SELECT t1.val          +\n      |            |         |    FROM (t1                               +\n      |            |         |      JOIN v1 USING (id));\n(7 rows)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-nested-views",children:"List nested views"}),"\n",(0,i.jsx)(n.p,{children:"This CTE query lists information about views that reference another view."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"WITH"})," clause in this CTE query selects all the views in the user schemas. The main ",(0,i.jsx)(n.code,{children:"SELECT"})," statement finds all views that reference another view."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"WITH views AS ( SELECT v.relname AS view,\n  d.refobjid AS ref_object,\n  v.oid AS view_oid,\n  ns.nspname AS namespace\nFROM pg_depend AS d\n  JOIN pg_rewrite AS r\n    ON r.oid = d.objid\n  JOIN pg_class AS v\n    ON v.oid = r.ev_class\n  JOIN pg_namespace AS ns\n    ON ns.oid = v.relnamespace\nWHERE v.relkind = 'v'\n  AND ns.nspname NOT IN ('pg_catalog', 'information_schema', 'gp_toolkit') -- exclude system schemas\n  AND d.deptype = 'n'    -- normal dependency\n  AND NOT (v.oid = d.refobjid) -- not a self-referencing dependency\n )\nSELECT views.view, views.namespace AS schema,\n  views.ref_object::regclass AS ref_view,\n  ref_nspace.nspname AS ref_schema\nFROM views \n  JOIN pg_depend as dep\n    ON dep.refobjid = views.view_oid \n  JOIN pg_class AS class\n    ON views.ref_object = class.oid\n  JOIN  pg_namespace AS ref_nspace\n      ON class.relnamespace = ref_nspace.oid\n  WHERE class.relkind = 'v'\n    AND dep.deptype = 'n'    \n; \n view | schema | ref_view | ref_schema\n------+--------+----------+------------\n v2   | public | v1       | public\n v2a  | mytest | v1       | public\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-data",children:"Example data"}),"\n",(0,i.jsx)(n.p,{children:"The output for the example queries is based on these database objects and data."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE t1 (\n   id integer PRIMARY KEY,\n   val text NOT NULL\n);\n\nINSERT INTO t1 VALUES\n   (1, 'one'), (2, 'two'), (3, 'three');\n\nCREATE FUNCTION f() RETURNS text\n   LANGUAGE sql AS 'SELECT ''suffix''::text';\n\nCREATE VIEW v1 AS\n  SELECT max(id) AS id\n  FROM t1;\n \nCREATE VIEW v2 AS\n  SELECT t1.val\n  FROM t1 JOIN v1 USING (id);\n \nCREATE VIEW v3 AS\n  SELECT val || f()\n  FROM t1;\n\nCREATE VIEW v5 AS\n  SELECT f() ;\n\nCREATE SCHEMA mytest ;\n\nCREATE TABLE mytest.tm1 (\n   id integer PRIMARY KEY,\n   val text NOT NULL\n);\n\nINSERT INTO mytest.tm1 VALUES\n   (1, 'one'), (2, 'two'), (3, 'three');\n\nCREATE VIEW vm1 AS\n  SELECT id FROM mytest.tm1 WHERE id < 3 ;\n\nCREATE VIEW mytest.vm1 AS\n  SELECT id FROM public.t1 WHERE id < 3 ;\n\nCREATE VIEW vm2 AS\n  SELECT max(id) AS id\n  FROM mytest.tm1;\n\nCREATE VIEW mytest.v2a AS\n  SELECT t1.val\n  FROM public.t1 JOIN public.v1 USING (id);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var i=t(67294);const s={},d=i.createContext(s);function a(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);