"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[78984],{59623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(85893),s=t(11151);const o={title:"Query Plan Hints"},a="Query Plan Hints",r={id:"performance/optimize-queries/query-hints",title:"Query Plan Hints",description:"Apache Cloudberry uses two types of query optimizers",source:"@site/versioned_docs/version-2.x/performance/optimize-queries/query-hints.md",sourceDirName:"performance/optimize-queries",slug:"/performance/optimize-queries/query-hints",permalink:"/docs/performance/optimize-queries/query-hints",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/performance/optimize-queries/query-hints.md",tags:[],version:"2.x",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1753946932,formattedLastUpdatedAt:"Jul 31, 2025",frontMatter:{title:"Query Plan Hints"},sidebar:"docsbars",previous:{title:"Use RuntimeFilter to Optimize Join Queries",permalink:"/docs/performance/optimize-queries/use-runtimefilter-to-optimize-queries"},next:{title:"Distribution and Skew",permalink:"/docs/performance/distribution-and-skew"}},l={},c=[{value:"Quick example",id:"quick-example",level:2},{value:"Cardinality hints",id:"cardinality-hints",level:2},{value:"Table access hints",id:"table-access-hints",level:2},{value:"Join type hints",id:"join-type-hints",level:2},{value:"Join order hints",id:"join-order-hints",level:2},{value:"Supported scope and limitations",id:"supported-scope-and-limitations",level:2},{value:"Best practices for using query plan hints",id:"best-practices-for-using-query-plan-hints",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"query-plan-hints",children:"Query Plan Hints"}),"\n",(0,i.jsx)(n.p,{children:"Apache Cloudberry uses two types of query optimizers: the Postgres-based optimizer and GPORCA. Each optimizer is tuned for specific types of workloads:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Postgres-based optimizer: suitable for transactional workloads."}),"\n",(0,i.jsx)(n.li,{children:"GPORCA: suitable for analytical and hybrid transactional-analytical workloads."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"When processing a query, the optimizer explores a large search space of equivalent execution plans. It estimates the number of rows for each operation using table statistics and a cardinality estimation model. Based on this, the optimizer assigns a cost to each plan and selects the one with the lowest cost as the final execution plan."}),"\n",(0,i.jsx)(n.p,{children:"Query plan hints or optimizer hints are directives that users provide to influence the optimizer's execution strategy. These hints allow users to override default optimizer behavior to address issues such as inaccurate row estimates, suboptimal scan methods, inappropriate join types, or inefficient join orders. This document describes the different types of hints and their applicable scenarios."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Apache Cloudberry currently does not support hints for controlling Motion operators."})}),"\n",(0,i.jsx)(n.h2,{id:"quick-example",children:"Quick example"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"To enable query plan hints, you must first load the relevant module in the psql session:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"LOAD 'pg_hint_plan';\n"})}),(0,i.jsx)(n.p,{children:"You can also configure the database or user to load the module automatically:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"ALTER DATABASE a_database SET session_preload_libraries='pg_hint_plan';\nALTER USER a_user SET session_preload_libraries='pg_hint_plan';\n"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE foo(a int);\nCREATE INDEX ON foo(a);\nINSERT INTO foo SELECT i FROM generate_series(1, 100000)i;\n\nLOAD 'pg_hint_plan';\nSHOW pg_hint_plan.enable_hint;\npg_hint_plan.enable_hint\n--------------------------\non\n(1 row)\n\nEXPLAIN SELECT count(*) FROM foo WHERE a > 6;\n                                    QUERY PLAN\n--------------------------------------------------------------------------------------\nFinalize Aggregate  (cost=537.05..537.06 rows=1 width=8)\n   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=536.99..537.04 rows=3 width=8)\n         ->  Partial Aggregate  (cost=536.99..537.00 rows=1 width=8)\n               ->  Seq Scan on foo  (cost=0.00..453.67 rows=33330 width=0)\n                     Filter: (a > 6)\nOptimizer: Postgres-based planner\n(6 rows)\n\n/*+ IndexScan(foo foo_a_idx) */\nEXPLAIN SELECT count(*) FROM foo WHERE a > 6;\n                                       QUERY PLAN\n---------------------------------------------------------------------------------------------\nFinalize Aggregate  (cost=809.00..809.01 rows=1 width=8)\n   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=808.94..808.99 rows=3 width=8)\n         ->  Partial Aggregate  (cost=808.94..808.95 rows=1 width=8)\n               ->  Index Scan using foo_a_idx on foo  (cost=0.17..725.61 rows=33330 width=0)\n                     Index Cond: (a > 6)\nOptimizer: Postgres-based planner\n(6 rows)\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also specify multiple hints at the same time, such as controlling scan methods and row estimates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"/*+ IndexScan(t1 my_index) Rows(t1 t2 #1000) */\nSELECT * FROM t1 JOIN t2 ON t1.a = t2.a WHERE t1.a < 100;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cardinality-hints",children:"Cardinality hints"}),"\n",(0,i.jsx)(n.p,{children:"When the optimizer inaccurately estimates the number of rows for join operations, it may choose inefficient plans\u2014such as using Broadcast instead of Redistribute, or preferring Merge Join over Hash Join incorrectly. Cardinality hints allow you to adjust the estimated number of rows for specific operations. This is especially useful when statistics are missing or outdated."}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"/*+ Rows(t1 t2 t3 #42) */ SELECT * FROM t1, t2, t3;  -- set row estimate to 42\n/*+ Rows(t1 t2 t3 +42) */ SELECT * FROM t1, t2, t3; -- increase original estimate by 42\n/*+ Rows(t1 t2 t3 -42) */ SELECT * FROM t1, t2, t3; -- decrease original estimate by 42\n/*+ Rows(t1 t2 t3 *42) */ SELECT * FROM t1, t2, t3; -- multiply original estimate by 42\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Cardinality hints are currently only effective with the ORCA optimizer. The Postgres optimizer does not recognize them."})}),"\n",(0,i.jsx)(n.h2,{id:"table-access-hints",children:"Table access hints"}),"\n",(0,i.jsx)(n.p,{children:"Due to inaccurate statistics or biased cost estimation, the optimizer might choose suboptimal scan strategies. Compared to global configuration parameters (GUCs), table access hints offer finer-grained control over how each table is scanned in a query. You can choose whether to use an index or force a specific index."}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"/*+ SeqScan(t1) */ SELECT * FROM t1 WHERE t1.a > 42;  -- force sequential scan\n/*+ IndexScan(t1 my_index) */ SELECT * FROM t1 WHERE t1.a > 42;  -- force index scan\n/*+ IndexOnlyScan(t1) */ SELECT * FROM t1 WHERE t1.a > 42;  -- force index-only scan\n/*+ BitmapScan(t1 my_bitmap_index) */ SELECT * FROM t1 WHERE t1.a > 42;  -- force bitmap index scan\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Starting from v2.0.0, the ORCA optimizer supports scan method hints such as ",(0,i.jsx)(n.code,{children:"IndexScan"})," and ",(0,i.jsx)(n.code,{children:"SeqScan"}),", and generates plans accordingly. This feature depends on both the ORCA optimizer and the ",(0,i.jsx)(n.code,{children:"pg_hint_plan"})," extension."]})}),"\n",(0,i.jsx)(n.h2,{id:"join-type-hints",children:"Join type hints"}),"\n",(0,i.jsx)(n.p,{children:"When using a Hash Join, some intermediate results may be spilled to disk, which can affect performance. If a user knows that a specific query would benefit from a Nested Loop Join, they can explicitly specify the join type and the order of inner and outer tables using hints."}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"/*+ HashJoin(t1 t2) */ SELECT * FROM t1, t2;\n/*+ NestLoop(t1 t2) */ SELECT * FROM t1, t2;\n/*+ MergeJoin(t1 t2) */ SELECT * FROM t1 FULL JOIN t2 ON t1.a = t2.a;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"join-order-hints",children:"Join order hints"}),"\n",(0,i.jsxs)(n.p,{children:["When the optimizer chooses a suboptimal join order due to missing statistics or inaccurate estimates, you can use the ",(0,i.jsx)(n.code,{children:"Leading(...)"})," hint to specify the join order between tables."]}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"/*+ Leading(t1 t2 t3) */ SELECT * FROM t1, t2, t3;\n/*+ Leading(t1 (t3 t2)) */ SELECT * FROM t1, t2, t3;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also use ",(0,i.jsx)(n.code,{children:"Leading(...)"})," to control join order in queries involving ",(0,i.jsx)(n.code,{children:"LEFT OUTER JOIN"})," or ",(0,i.jsx)(n.code,{children:"RIGHT OUTER JOIN"}),". The following constraints apply:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The join order in the hint must match the join structure in the original SQL. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The hint ",(0,i.jsx)(n.code,{children:"/*+ Leading((t1 t2)) */"})," preserves the left join. The hint ",(0,i.jsx)(n.code,{children:"/*+ Leading((t2 t1)) */"})," transforms it into a right join (semantically equivalent but generates a different plan)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"For nested outer joins, you must specify the hint in the same semantic nesting order;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Changing join direction is not supported for non-equality join conditions (e.g. ",(0,i.jsx)(n.code,{children:"t1.a > t2.a"}),"), as it would break the query semantics."]}),"\n",(0,i.jsxs)(n.p,{children:["Example: The following hint instructs the optimizer to first join ",(0,i.jsx)(n.code,{children:"t3"})," with the result of ",(0,i.jsx)(n.code,{children:"t2"})," joined to ",(0,i.jsx)(n.code,{children:"t1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"/*+ Leading((t3 (t2 t1))) */\nSELECT * FROM t1 LEFT JOIN t2 ON t1.a = t2.a LEFT JOIN t3 ON t2.b = t3.b;\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"supported-scope-and-limitations",children:"Supported scope and limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Query plan hints rely on the ",(0,i.jsx)(n.code,{children:"pg_hint_plan"})," extension, which must be explicitly loaded."]}),"\n",(0,i.jsx)(n.li,{children:"Hints for controlling data redistribution strategies are not yet supported."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-using-query-plan-hints",children:"Best practices for using query plan hints"}),"\n",(0,i.jsx)(n.p,{children:"When using hints, follow these best practices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Focus on solving specific issues, such as inaccurate row estimates, suboptimal scan methods, or inefficient join types or join orders."}),"\n",(0,i.jsx)(n.li,{children:"Test thoroughly before deployment to ensure that the hint improves performance and reduces resource usage."}),"\n",(0,i.jsx)(n.li,{children:"Use hints as a temporary measure. They are intended for short-term tuning and should be reviewed and adjusted as data changes."}),"\n",(0,i.jsxs)(n.li,{children:["Avoid conflicts with GUC settings. If a GUC disables a feature (such as ",(0,i.jsx)(n.code,{children:"IndexScan"}),") that a hint tries to enable, the hint will be ignored. Make sure global settings align with your hints."]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pg_hint_plan"})," allows you to include GUC settings directly in hints. For example:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"/*+ SeqScan(mytable) optimizer_enable_seqscan=on *//*Set(enable_indexscan off)*/\nEXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(67294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);