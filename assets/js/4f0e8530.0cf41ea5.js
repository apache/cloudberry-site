"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[92934],{1915:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var i=s(85893),r=s(11151);const a={title:"Migration and Upgrade",toc_max_heading_level:5},l="Migration and Upgrade",t={id:"sys-admin/migration-and-upgrade",title:"Migration and Upgrade",description:"This guide provides detailed instructions for two scenarios:",source:"@site/docs/sys-admin/migration-and-upgrade.md",sourceDirName:"sys-admin",slug:"/sys-admin/migration-and-upgrade",permalink:"/docs/next/sys-admin/migration-and-upgrade",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/docs/sys-admin/migration-and-upgrade.md",tags:[],version:"current",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1756093629,formattedLastUpdatedAt:"Aug 25, 2025",frontMatter:{title:"Migration and Upgrade",toc_max_heading_level:5},sidebar:"docsbars",previous:{title:"Recommended Monitoring and Maintenance Tasks",permalink:"/docs/next/sys-admin/recommended-maintenance-monitoring-tasks"},next:{title:"Develop Database Extensions Using PGRX",permalink:"/docs/next/developer/develop-extensions-using-rust"}},o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installing cbcopy",id:"installing-cbcopy",level:2},{value:"Version Compatibility",id:"version-compatibility",level:2},{value:"Cloudberry Upgrade (1.x to 2.x)",id:"cloudberry-upgrade-1x-to-2x",level:3},{value:"Greenplum to Cloudberry Migration",id:"greenplum-to-cloudberry-migration",level:3},{value:"Migration Process",id:"migration-process",level:2},{value:"Basic Migration Command",id:"basic-migration-command",level:3},{value:"Migration Modes",id:"migration-modes",level:3},{value:"Data Loading Options",id:"data-loading-options",level:3},{value:"Handling Dependencies",id:"handling-dependencies",level:3},{value:"Global Objects",id:"global-objects",level:4},{value:"Role Management",id:"role-management",level:4},{value:"Tablespace Management",id:"tablespace-management",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Migration Validation",id:"migration-validation",level:3},{value:"Example Scenarios",id:"example-scenarios",level:2},{value:"Scenario 1: Cloudberry 1.6 to 2.0 Upgrade",id:"scenario-1-cloudberry-16-to-20-upgrade",level:3},{value:"Scenario 2: Greenplum 6.x/7.x to Cloudberry 2.0 Migration",id:"scenario-2-greenplum-6x7x-to-cloudberry-20-migration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"migration-and-upgrade",children:"Migration and Upgrade"}),"\n",(0,i.jsx)(n.p,{children:"This guide provides detailed instructions for two scenarios:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Migrating from Greenplum Database 6.x/7.x to Apache Cloudberry"}),"\n",(0,i.jsx)(n.li,{children:"Upgrading from Apache Cloudberry 1.x (non-Apache release before joining the Apache Incubator) to Apache Cloudberry 2.x"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Both scenarios utilize the ",(0,i.jsx)(n.code,{children:"cbcopy"})," tool, a powerful data migration utility designed for efficient database migration and upgrade operations."]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before starting the migration or upgrade process, ensure you have:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Go Programming language version 1.19 or higher installed"}),"\n",(0,i.jsx)(n.li,{children:"Superuser privileges on both source and target databases"}),"\n",(0,i.jsx)(n.li,{children:"Network connectivity between source and target database clusters"}),"\n",(0,i.jsx)(n.li,{children:"Sufficient disk space on both source and target clusters"}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"cbcopy"})," and ",(0,i.jsx)(n.code,{children:"cbcopy_helper"})," binaries installed in the ",(0,i.jsx)(n.code,{children:"$GPHOME/bin"})," directory on all nodes of both source and target databases"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installing-cbcopy",children:"Installing cbcopy"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Clone the repository:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/cloudberry-contrib/cbcopy.git\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Build the binaries:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd cbcopy\nmake\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Install the binaries:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make install\n"})}),"\n",(0,i.jsx)(n.h2,{id:"version-compatibility",children:"Version Compatibility"}),"\n",(0,i.jsx)(n.h3,{id:"cloudberry-upgrade-1x-to-2x",children:"Cloudberry Upgrade (1.x to 2.x)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Source: Cloudberry 1.6"}),"\n",(0,i.jsx)(n.li,{children:"Target: Cloudberry 2.0"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"greenplum-to-cloudberry-migration",children:"Greenplum to Cloudberry Migration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Source: Greenplum Database 6.x or 7.x"}),"\n",(0,i.jsx)(n.li,{children:"Target: Cloudberry 1.x or 2.x"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migration-process",children:"Migration Process"}),"\n",(0,i.jsx)(n.p,{children:"The migration process consists of two main phases:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Metadata migration"}),"\n",(0,i.jsx)(n.li,{children:"Data migration"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We recommend performing these phases separately for better control and reliability:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["First migrate metadata using ",(0,i.jsx)(n.code,{children:"--metadata-only"})]}),"\n",(0,i.jsxs)(n.li,{children:["Then migrate data using ",(0,i.jsx)(n.code,{children:"--data-only"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"basic-migration-command",children:"Basic Migration Command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbcopy --source-host=<source_host> \\\n    --source-port=<source_port> \\\n    --source-user=<source_user> \\\n    --dest-host=<dest_host> \\\n    --dest-port=<dest_port> \\\n    --dest-user=<dest_user> \\\n    [additional_options]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"migration-modes",children:"Migration Modes"}),"\n",(0,i.jsx)(n.p,{children:"cbcopy supports several migration modes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Full Migration"})," (",(0,i.jsx)(n.code,{children:"--full"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Migrates all metadata and data from source to target"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Database Migration"})," (",(0,i.jsx)(n.code,{children:"--dbname"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Migrates specific database(s)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'cbcopy --dbname="database1,database2" [other_options]\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Schema Migration"})," (",(0,i.jsx)(n.code,{children:"--schema"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Migrates specific schema(s)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'cbcopy --schema="database.schema1,database.schema2" [other_options]\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Table Migration"})," (",(0,i.jsx)(n.code,{children:"--include-table"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Migrates specific table(s)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'cbcopy --include-table="database.schema.table1,database.schema.table2" [other_options]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-loading-options",children:"Data Loading Options"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Append Mode"})," (",(0,i.jsx)(n.code,{children:"--append"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Inserts migrated records into existing tables"}),"\n",(0,i.jsx)(n.li,{children:"Use when you want to preserve existing data"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Truncate Mode"})," (",(0,i.jsx)(n.code,{children:"--truncate"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Clears existing records before inserting migrated data"}),"\n",(0,i.jsx)(n.li,{children:"Use when you want to replace existing data"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbcopy --truncate [other_options]\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"handling-dependencies",children:"Handling Dependencies"}),"\n",(0,i.jsx)(n.h4,{id:"global-objects",children:"Global Objects"}),"\n",(0,i.jsx)(n.p,{children:"For tables depending on global objects (e.g., tablespaces):"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"--with-global-metadata"})," to automatically create these objects"]}),"\n",(0,i.jsxs)(n.li,{children:["Or manually create them before migration:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLESPACE custom_tablespace LOCATION '/path/to/tablespace';\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"role-management",children:"Role Management"}),"\n",(0,i.jsx)(n.p,{children:"To change table ownership during migration:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create target roles in the target database"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"--owner-mapping-file"})," to specify role mappings:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"source_role1,target_role1\nsource_role2,target_role2\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tablespace-management",children:"Tablespace Management"}),"\n",(0,i.jsx)(n.p,{children:"Three options for handling tablespaces:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Default Mode"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Objects created in same tablespace names as source"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"--with-global-metadata"})," or manually create tablespaces"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Single Target Tablespace"})," (",(0,i.jsx)(n.code,{children:"--dest-tablespace"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbcopy --dest-tablespace=new_space [other_options]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tablespace Mapping"})," (",(0,i.jsx)(n.code,{children:"--tablespace-mapping-file"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"source_tablespace1,target_tablespace1\nsource_tablespace2,target_tablespace2\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parallel Jobs"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Control concurrent table copies with ",(0,i.jsx)(n.code,{children:"--copy-jobs"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbcopy --copy-jobs=8 [other_options]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Copy Strategies"}),"\ncbcopy automatically selects the optimal strategy based on table size:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Copy On Coordinator: For small tables"}),"\n",(0,i.jsx)(n.li,{children:"Copy On Segment: For large tables with matching cluster configurations"}),"\n",(0,i.jsx)(n.li,{children:"Copy on External Table: For other cases"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"migration-validation",children:"Migration Validation"}),"\n",(0,i.jsx)(n.p,{children:"cbcopy performs automatic validation by comparing row counts between source and target. Failed migrations are logged in:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"$USER/gpAdminLogs/cbcopy_succeed_$timestamp"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"$USER/gpAdminLogs/cbcopy_failed_$timestamp"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For retry attempts, use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbcopy --exclude-table-file=cbcopy_succeed_$timestamp [other_options]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example-scenarios",children:"Example Scenarios"}),"\n",(0,i.jsx)(n.h3,{id:"scenario-1-cloudberry-16-to-20-upgrade",children:"Scenario 1: Cloudberry 1.6 to 2.0 Upgrade"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Step 1: Migrate metadata\ncbcopy --source-host=127.0.0.1 \\\n    --source-port=15432 \\\n    --source-user=gpadmin \\\n    --dest-host=127.0.0.1 \\\n    --dest-port=25432 \\\n    --dest-user=gpadmin \\\n    --full \\\n    --metadata-only\n\n# Step 2: Migrate data\ncbcopy --source-host=127.0.0.1 \\\n    --source-port=15432 \\\n    --source-user=gpadmin \\\n    --dest-host=127.0.0.1 \\\n    --dest-port=25432 \\\n    --dest-user=gpadmin \\\n    --full \\\n    --data-only \\\n    --truncate\n"})}),"\n",(0,i.jsx)(n.h3,{id:"scenario-2-greenplum-6x7x-to-cloudberry-20-migration",children:"Scenario 2: Greenplum 6.x/7.x to Cloudberry 2.0 Migration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Step 1: Migrate metadata with global objects\ncbcopy --source-host=127.0.0.1 \\\n    --source-port=15432 \\\n    --source-user=gpadmin \\\n    --dest-host=127.0.0.1 \\\n    --dest-port=25432 \\\n    --dest-user=gpadmin \\\n    --full \\\n    --metadata-only \\\n    --with-global-metadata\n\n# Step 2: Migrate data\ncbcopy --source-host=127.0.0.1 \\\n    --source-port=15432 \\\n    --source-user=gpadmin \\\n    --dest-host=127.0.0.1 \\\n    --dest-port=25432 \\\n    --dest-user=gpadmin \\\n    --full \\\n    --data-only \\\n    --truncate \\\n    --copy-jobs=8\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Failed Migrations"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Check ",(0,i.jsx)(n.code,{children:"$USER/gpAdminLogs/cbcopy_$timestamp.log"})," for detailed error messages"]}),"\n",(0,i.jsx)(n.li,{children:"Use the success/failure files to retry failed migrations"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common Issues"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure all required tablespaces exist in target database"}),"\n",(0,i.jsx)(n.li,{children:"Verify network connectivity between source and target"}),"\n",(0,i.jsx)(n.li,{children:"Check user permissions on both databases"}),"\n",(0,i.jsx)(n.li,{children:"Ensure sufficient disk space on both clusters"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/cloudberry-contrib/cbcopy",children:"cbcopy GitHub Repository"})}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"cbcopy is contributed by community members; however, please note that it is not maintained as an official Cloudberry project yet."})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>t,a:()=>l});var i=s(67294);const r={},a=i.createContext(r);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);