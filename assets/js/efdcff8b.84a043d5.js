"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[43072],{33297:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=n(85893),r=n(11151);const a={title:"Queries with Aggregate Expressions"},i="Queries with Aggregate Expressions",o={id:"operate-with-data/sql-queries/aggregates-expressions",title:"Queries with Aggregate Expressions",description:"An aggregate expression applies an aggregate function across the rows that a query selects. An aggregate function performs a calculation on a set of values and returns a single value, such as the sum or average of the set of values. The syntax of an aggregate expression is one of the following:",source:"@site/versioned_docs/version-2.x/operate-with-data/sql-queries/aggregates-expressions.md",sourceDirName:"operate-with-data/sql-queries",slug:"/operate-with-data/sql-queries/aggregates-expressions",permalink:"/docs/operate-with-data/sql-queries/aggregates-expressions",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/operate-with-data/sql-queries/aggregates-expressions.md",tags:[],version:"2.x",lastUpdatedBy:"Alwin",lastUpdatedAt:1750319831,formattedLastUpdatedAt:"Jun 19, 2025",frontMatter:{title:"Queries with Aggregate Expressions"},sidebar:"docsbars",previous:{title:"Value Expressions",permalink:"/docs/operate-with-data/sql-queries/value-expressions"},next:{title:"Subqueries",permalink:"/docs/operate-with-data/sql-queries/subqueries"}},l={},c=[{value:"Limitations of aggregate expressions",id:"limitations-of-aggregate-expressions",level:4}];function d(e){const s={code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"queries-with-aggregate-expressions",children:"Queries with Aggregate Expressions"}),"\n",(0,t.jsx)(s.p,{children:"An aggregate expression applies an aggregate function across the rows that a query selects. An aggregate function performs a calculation on a set of values and returns a single value, such as the sum or average of the set of values. The syntax of an aggregate expression is one of the following:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"aggregate_name(expression [ , ... ] ) [ FILTER ( WHERE filter_clause ) ]"})," \u2014 operates across all input rows for which the expected result value is non-null. ",(0,t.jsx)(s.code,{children:"ALL"})," is the default."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"aggregate_name(ALL expression [ , ... ] ) [ FILTER ( WHERE filter_clause ) ]"})," \u2014 operates identically to the first form because ",(0,t.jsx)(s.code,{children:"ALL"})," is the default."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"aggregate_name(DISTINCT expression [ , ... ] ) [ FILTER ( WHERE filter_clause ) ]"})," \u2014 operates across all distinct non-null values of input rows."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"aggregate_name(*) [ FILTER ( WHERE filter_clause ) ]"})," \u2014 operates on all rows with values both null and non-null. Generally, this form is most useful for the ",(0,t.jsx)(s.code,{children:"count(*)"})," aggregate function."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Where ",(0,t.jsx)(s.code,{children:"aggregate_name"})," is a previously defined aggregate (possibly schema-qualified) and ",(0,t.jsx)(s.code,{children:"expression"})," is any value expression that does not contain an aggregate expression."]}),"\n",(0,t.jsxs)(s.p,{children:["For example, ",(0,t.jsx)(s.code,{children:"count(*)"})," yields the total number of input rows, ",(0,t.jsx)(s.code,{children:"count(f1)"})," yields the number of input rows in which ",(0,t.jsx)(s.code,{children:"f1"})," is non-null, and",(0,t.jsx)(s.code,{children:"count(distinct f1)"})," yields the number of distinct non-null values of ",(0,t.jsx)(s.code,{children:"f1"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["If ",(0,t.jsx)(s.code,{children:"FILTER"})," is specified, then only the input rows for which the ",(0,t.jsx)(s.code,{children:"filter_clause"})," evaluates to true are fed to the aggregate function; other rows are discarded. For example:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT\n    count(*) AS unfiltered,\n    count(*) FILTER (WHERE i < 5) AS filtered\nFROM generate_series(1,10) AS s(i);\n unfiltered | filtered\n------------+----------\n         10 |        4\n(1 row)\n"})}),"\n",(0,t.jsx)(s.p,{children:"You can also add custom aggregate functions."}),"\n",(0,t.jsxs)(s.p,{children:["Apache Cloudberry provides the ",(0,t.jsx)(s.code,{children:"MEDIAN"})," aggregate function, which returns the fiftieth percentile of the ",(0,t.jsx)(s.code,{children:"PERCENTILE_CONT"})," result and special aggregate expressions for inverse distribution functions as follows:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"PERCENTILE_CONT(<percentage>) WITHIN GROUP (ORDER BY <expression>)\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"PERCENTILE_DISC(<percentage>) WITHIN GROUP (ORDER BY <expression>)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Currently you can use only these two expressions with the keyword ",(0,t.jsx)(s.code,{children:"WITHIN GROUP"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"limitations-of-aggregate-expressions",children:"Limitations of aggregate expressions"}),"\n",(0,t.jsx)(s.p,{children:"The following are current limitations of the aggregate expressions:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Apache Cloudberry does not support the following keywords: ",(0,t.jsx)(s.code,{children:"ALL"}),", ",(0,t.jsx)(s.code,{children:"DISTINCT"}),", and ",(0,t.jsx)(s.code,{children:"OVER"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["An aggregate expression can appear only in the result list or ",(0,t.jsx)(s.code,{children:"HAVING"})," clause of a ",(0,t.jsx)(s.code,{children:"SELECT"})," command. It is forbidden in other clauses, such as ",(0,t.jsx)(s.code,{children:"WHERE"}),", because those clauses are logically evaluated before the results of aggregates form. This restriction applies to the query level to which the aggregate belongs."]}),"\n",(0,t.jsxs)(s.li,{children:["When an aggregate expression appears in a subquery, the aggregate is normally evaluated over the rows of the subquery. If the aggregate's arguments (and ",(0,t.jsx)(s.code,{children:"filter_clause"})," if any) contain only outer-level variables, the aggregate belongs to the nearest such outer level and evaluates over the rows of that query. The aggregate expression as a whole is then an outer reference for the subquery in which it appears, and the aggregate expression acts as a constant over any one evaluation of that subquery. The restriction about appearing only in the result list or ",(0,t.jsx)(s.code,{children:"HAVING"})," clause applies with respect to the query level at which the aggregate appears."]}),"\n",(0,t.jsx)(s.li,{children:"Apache Cloudberry does not support specifying an aggregate function as an argument to another aggregate function."}),"\n",(0,t.jsx)(s.li,{children:"Apache Cloudberry does not support specifying a window function as an argument to an aggregate function."}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>o,a:()=>i});var t=n(67294);const r={},a=t.createContext(r);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);