"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[81327],{89262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=n(85893),s=n(11151);const r={title:"About View Storage"},o="About View Storage",a={id:"operate-with-data/operate-with-db-objects/view-storage",title:"About View Storage",description:'A view is similar to a table, both are relations - that is "something with columns". All such objects are stored in the catalog table pg_class. These are the general differences:',source:"@site/versioned_docs/version-2.x/operate-with-data/operate-with-db-objects/view-storage.md",sourceDirName:"operate-with-data/operate-with-db-objects",slug:"/operate-with-data/operate-with-db-objects/view-storage",permalink:"/docs/operate-with-data/operate-with-db-objects/view-storage",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/operate-with-data/operate-with-db-objects/view-storage.md",tags:[],version:"2.x",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1756189168,formattedLastUpdatedAt:"Aug 26, 2025",frontMatter:{title:"About View Storage"},sidebar:"docsbars",previous:{title:"Create and Manage Views",permalink:"/docs/operate-with-data/operate-with-db-objects/create-and-manage-views"},next:{title:"Work with View Dependencies",permalink:"/docs/operate-with-data/operate-with-db-objects/work-with-view-dependencies"}},d={},c=[{value:"Where view dependency information is stored",id:"where-view-dependency-information-is-stored",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"about-view-storage",children:"About View Storage"}),"\n",(0,i.jsxs)(t.p,{children:['A view is similar to a table, both are relations - that is "something with columns". All such objects are stored in the catalog table ',(0,i.jsx)(t.code,{children:"pg_class"}),". These are the general differences:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"A view has no data files (because it holds no data)."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["The value of ",(0,i.jsx)(t.code,{children:"pg_class.relkind"})," for a view is ",(0,i.jsx)(t.code,{children:"v"})," rather than ",(0,i.jsx)(t.code,{children:"r"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["A view has an ",(0,i.jsx)(t.code,{children:"ON SELECT"})," query rewrite rule called ",(0,i.jsx)(t.code,{children:"_RETURN"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The rewrite rule contains the definition of the view and is stored in the ",(0,i.jsx)(t.code,{children:"ev_action"})," column of the ",(0,i.jsx)(t.code,{children:"pg_rewrite"})," catalog table."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For more technical information about views, see the PostgreSQL documentation about ",(0,i.jsx)(t.a,{href:"https://www.postgresql.org/docs/14/rules-views.html",children:"Views and the Rule System"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Also, a view definition is ",(0,i.jsx)(t.em,{children:"not"})," stored as a string, but in the form of a query parse tree. Views are parsed when they are created, which has several consequences:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Object names are resolved during ",(0,i.jsx)(t.code,{children:"CREATE VIEW"}),", so the current setting of ",(0,i.jsx)(t.code,{children:"search_path"})," affects the view definition."]}),"\n",(0,i.jsx)(t.li,{children:"Objects are referred to by their internal immutable object ID rather than by their name. Consequently, renaming an object or column referenced in a view definition can be performed without dropping the view."}),"\n",(0,i.jsx)(t.li,{children:"Apache Cloudberry can determine exactly which objects are used in the view definition, so it can add dependencies on them."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Note that the way Apache Cloudberry handles views is quite different from the way Apache Cloudberry handles functions: function bodies are stored as strings and are not parsed when they are created. Consequently, Apache Cloudberry does not know on which objects a given function depends."}),"\n",(0,i.jsx)(t.h2,{id:"where-view-dependency-information-is-stored",children:"Where view dependency information is stored"}),"\n",(0,i.jsx)(t.p,{children:"These system catalog tables contain the information used to determine the tables on which a view depends."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"pg_class"})," - object information including tables and views. The ",(0,i.jsx)(t.code,{children:"relkind"})," column describes the type of object."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"pg_depend"})," - object dependency information for database-specific (non-shared) objects."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"pg_rewrite"})," - rewrite rules for tables and views."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"pg_attribute"})," - information about table columns."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"pg_namespace"})," - information about schemas (namespaces)."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"It is important to note that there is no direct dependency of a view on the objects it uses: the dependent object is actually the view's rewrite rule. That adds another layer of indirection to view dependency information."})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var i=n(67294);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);