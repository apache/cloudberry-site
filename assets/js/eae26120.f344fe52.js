"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[72811],{46992:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>n,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>a});var r=s(85893),o=s(11151);const d={title:"pg_amop"},n="pg_amop",c={id:"sys-catalogs/sys-tables/pg-amop",title:"pg_amop",description:"The pgamop table in the pgcatalog schema stores information about operators associated with index access method operator classes. There is one row for each operator that is a member of an operator class.",source:"@site/docs/sys-catalogs/sys-tables/pg-amop.md",sourceDirName:"sys-catalogs/sys-tables",slug:"/sys-catalogs/sys-tables/pg-amop",permalink:"/docs/next/sys-catalogs/sys-tables/pg-amop",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/docs/sys-catalogs/sys-tables/pg-amop.md",tags:[],version:"current",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1758767220,formattedLastUpdatedAt:"Sep 25, 2025",frontMatter:{title:"pg_amop"},sidebar:"docsbars",previous:{title:"pg_am",permalink:"/docs/next/sys-catalogs/sys-tables/pg-am"},next:{title:"pg_amproc",permalink:"/docs/next/sys-catalogs/sys-tables/pg-amproc"}},i={},a=[];function l(e){const t={code:"code",h1:"h1",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"pg_amop",children:"pg_amop"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"pg_amop"})," table in the ",(0,r.jsx)(t.code,{children:"pg_catalog"})," schema stores information about operators associated with index access method operator classes. There is one row for each operator that is a member of an operator class."]}),"\n",(0,r.jsxs)(t.p,{children:["An entry's ",(0,r.jsx)(t.code,{children:"amopmethod"})," must match the ",(0,r.jsx)(t.code,{children:"opfmethod"})," of its containing operator family (including ",(0,r.jsx)(t.code,{children:"amopmethod"})," here is an intentional denormalization of the catalog structure for performance reasons). Also, ",(0,r.jsx)(t.code,{children:"amoplefttype"})," and ",(0,r.jsx)(t.code,{children:"amoprighttype"})," must match the ",(0,r.jsx)(t.code,{children:"oprleft"})," and ",(0,r.jsx)(t.code,{children:"oprright"})," fields of the referenced ",(0,r.jsx)(t.code,{children:"pg_operator"})," entry."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"column"}),(0,r.jsx)(t.th,{children:"type"}),(0,r.jsx)(t.th,{children:"references"}),(0,r.jsx)(t.th,{children:"description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"oid"})}),(0,r.jsx)(t.td,{children:"oid"}),(0,r.jsx)(t.td,{children:"\xa0"}),(0,r.jsx)(t.td,{children:"Row identifier (hidden attribute; must be explicitly selected)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amopfamily"})}),(0,r.jsx)(t.td,{children:"oid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"pg_opfamily.oid"})}),(0,r.jsx)(t.td,{children:"The operator family that this entry is for"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amoplefttype"})}),(0,r.jsx)(t.td,{children:"oid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"pg_type.oid"})}),(0,r.jsx)(t.td,{children:"Left-hand input data type of operator"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amoprighttype"})}),(0,r.jsx)(t.td,{children:"oid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"pg_type.oid"})}),(0,r.jsx)(t.td,{children:"Right-hand input data type of operator"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amopstrategy"})}),(0,r.jsx)(t.td,{children:"smallint"}),(0,r.jsx)(t.td,{children:"\xa0"}),(0,r.jsx)(t.td,{children:"Operator strategy number"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amoppurpose"})}),(0,r.jsx)(t.td,{children:"char"}),(0,r.jsx)(t.td,{children:"\xa0"}),(0,r.jsxs)(t.td,{children:["Operator purpose, either ",(0,r.jsx)(t.code,{children:"s"})," for search or ",(0,r.jsx)(t.code,{children:"o"})," for ordering"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amopopr"})}),(0,r.jsx)(t.td,{children:"oid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"pg_operator.oid"})}),(0,r.jsx)(t.td,{children:"OID of the operator"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amopmethod"})}),(0,r.jsx)(t.td,{children:"oid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"pg_am.oid"})}),(0,r.jsx)(t.td,{children:"Index access method for the operator family"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"amopsortfamily"})}),(0,r.jsx)(t.td,{children:"oid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"pg_opfamily.oid"})}),(0,r.jsx)(t.td,{children:"If an ordering operator, the B-tree operator family that this entry sorts according to; zero if a search operator"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>c,a:()=>n});var r=s(67294);const o={},d=r.createContext(o);function n(e){const t=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),r.createElement(d.Provider,{value:t},e.children)}}}]);