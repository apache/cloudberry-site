"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[23180],{60195:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>u,toc:()=>c});var o=r(85893),t=r(11151),l=r(74866),s=r(85162);const a={title:"Quick Build"},i=void 0,u={id:"deployment/quick-build",title:"Quick Build",description:"In the following sections, we'll provide detailed, step-by-step instructions for building Apache Cloudberry from source code. However, if you're familiar with the process or prefer a quick start, you can simply copy and paste the commands below to get Apache Cloudberry up and running.",source:"@site/versioned_docs/version-2.x/deployment/quick-build.md",sourceDirName:"deployment",slug:"/deployment/quick-build",permalink:"/docs/deployment/quick-build",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/deployment/quick-build.md",tags:[],version:"2.x",lastUpdatedBy:"Dianjin Wang",lastUpdatedAt:1749108044,formattedLastUpdatedAt:"Jun 5, 2025",frontMatter:{title:"Quick Build"},sidebar:"docsbars",previous:{title:"Build Apache Cloudberry from Source: Complete Guide",permalink:"/docs/deployment/"},next:{title:"Create and configure the gpadmin User",permalink:"/docs/deployment/create-gpadmin-user"}},d={},c=[];function p(e){const n={code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In the following sections, we'll provide detailed, step-by-step instructions for building Apache Cloudberry from source code. However, if you're familiar with the process or prefer a quick start, you can simply copy and paste the commands below to get Apache Cloudberry up and running."}),"\n",(0,o.jsx)(n.p,{children:"By this, you will get an Apache Cloudberry environment with a demo cluster ready for testing and development."}),"\n",(0,o.jsxs)(l.Z,{children:[(0,o.jsx)(s.Z,{value:"rocky-linux",label:"For Rocky Linux 8+",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'\n# Install sudo & git\ndnf install -y sudo git\n\n# Create and configure the gpadmin user\nsudo useradd -U -m -s /bin/bash gpadmin\necho \'gpadmin ALL=(ALL) NOPASSWD:ALL\' | sudo tee /etc/sudoers.d/90-gpadmin\nsudo -u gpadmin sudo whoami # if the output is root, the configuration is correct\n\n\n# Required configuration for gpadmin user\nsudo -u gpadmin bash <<\'EOF\'\n## Add Cloudberry environment setup to .bashrc\necho -e \'\\n# Add Cloudberry entries\nif [ -f /usr/local/cloudberry-db/greenplum_path.sh ]; then\n  source /usr/local/cloudberry-db/greenplum_path.sh\nfi\n## US English with UTF-8 character encoding\nexport LANG=en_US.UTF-8\n\' >> /home/gpadmin/.bashrc\n## Set up SSH for passwordless access\nmkdir -p /home/gpadmin/.ssh\nif [ ! -f /home/gpadmin/.ssh/id_rsa ]; then\n  ssh-keygen -t rsa -b 2048 -C \'apache-cloudberry-dev\' -f /home/gpadmin/.ssh/id_rsa -N ""\nfi\ncat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys\n## Set proper SSH directory permissions\nchmod 700 /home/gpadmin/.ssh\nchmod 600 /home/gpadmin/.ssh/authorized_keys\nchmod 644 /home/gpadmin/.ssh/id_rsa.pub\nEOF\n\n\n# Configure system settings\nsudo tee /etc/security/limits.d/90-db-limits.conf << \'EOF\'\n## Core dump file size limits for gpadmin\ngpadmin soft core unlimited\ngpadmin hard core unlimited\n## Open file limits for gpadmin\ngpadmin soft nofile 524288\ngpadmin hard nofile 524288\n## Process limits for gpadmin\ngpadmin soft nproc 131072\ngpadmin hard nproc 131072\nEOF\n\n# Verify resource limits.\nsudo -u gpadmin bash -c "ulimit -a"\n\n# Install required packages\nsudo dnf install -y apr-devel \\\n  bison \\\n  bzip2-devel \\\n  cmake3 \\\n  diffutils \\\n  flex \\\n  gcc \\\n  gcc-c++ \\\n  glibc-langpack-en \\\n  glibc-locale-source \\\n  iproute \\\n  krb5-devel \\\n  libcurl-devel \\\n  libevent-devel \\\n  libxml2-devel \\\n  libuuid-devel \\\n  libzstd-devel \\\n  lz4-devel \\\n  net-tools \\\n  openldap-devel \\\n  openssl-devel \\\n  openssh-server \\\n  pam-devel \\\n  perl \\\n  perl-ExtUtils-Embed \\\n  perl-Test-Simple \\\n  perl-Env \\\n  python3-devel \\\n  readline-devel \\\n  rsync \\\n  wget \\\n  which \\\n  zlib-devel\n\n# Enable additional development tools and libraries\n## For Rocky Linux 8\nsudo dnf install -y --enablerepo=devel libuv-devel libyaml-devel perl-IPC-Run protobuf-devel\n## For Rocky Linux 9\nsudo dnf install -y --enablerepo=crb libuv-devel libyaml-devel perl-IPC-Run protobuf-devel\n\n# Only for Rocky Linux 8, install the higher version of gcc and gcc-c++\nsudo yum install -y gcc-toolset-11-gcc gcc-toolset-11-gcc-c++\nscl enable gcc-toolset-11 bash # for temprory use\nsudo echo "source /opt/rh/gcc-toolset-11/enable" >> /etc/profile.d/gcc.sh\nsudo source /etc/profile.d/gcc.sh #  for permanent use\n\n# Build Xerces-C source code\nXERCES_LATEST_RELEASE=3.3.0\nXERCES_INSTALL_PREFIX="/usr/local/xerces-c"\nwget -nv "https://dlcdn.apache.org//xerces/c/3/sources/xerces-c-${XERCES_LATEST_RELEASE}.tar.gz"\necho "$(curl -sL https://dlcdn.apache.org//xerces/c/3/sources/xerces-c-${XERCES_LATEST_RELEASE}.tar.gz.sha256)" | sha256sum -c -\ntar xf "xerces-c-${XERCES_LATEST_RELEASE}.tar.gz"\nrm "xerces-c-${XERCES_LATEST_RELEASE}.tar.gz"\ncd xerces-c-${XERCES_LATEST_RELEASE}\n./configure --prefix="${XERCES_INSTALL_PREFIX}-${XERCES_LATEST_RELEASE}"\nmake -j$(nproc)\nmake check\nsudo make install\nsudo ln -s ${XERCES_INSTALL_PREFIX}-${XERCES_LATEST_RELEASE} ${XERCES_INSTALL_PREFIX}\n\n# Switch to the gpadmin user from now on\nsudo su - gpadmin\n\n# Download Source Code\ngit clone https://github.com/apache/cloudberry.git ~/cloudberry\ncd ~/cloudberry\ngit submodule update --init --recursive\n\n# Prepare the build environment for Apache Cloudberry\nsudo rm -rf /usr/local/cloudberry-db\nsudo chmod a+w /usr/local\nmkdir -p /usr/local/cloudberry-db/lib\nsudo cp -v /usr/local/xerces-c/lib/libxerces-c.so \\\n           /usr/local/xerces-c/lib/libxerces-c-3.*.so \\\n           /usr/local/cloudberry-db/lib\nsudo chown -R gpadmin.gpadmin /usr/local/cloudberry-db\n\n# Run configure\ncd ~/cloudberry\nexport LD_LIBRARY_PATH=/usr/local/cloudberry-db/lib:LD_LIBRARY_PATH\n./configure --prefix=/usr/local/cloudberry-db \\\n            --disable-external-fts \\\n            --enable-debug \\\n            --enable-cassert \\\n            --enable-debug-extensions \\\n            --enable-gpcloud \\\n            --enable-ic-proxy \\\n            --enable-mapreduce \\\n            --enable-orafce \\\n            --enable-orca \\\n            --enable-pax \\\n            --enable-pxf \\\n            --enable-tap-tests \\\n            --with-gssapi \\\n            --with-ldap \\\n            --with-libxml \\\n            --with-lz4 \\\n            --with-pam \\\n            --with-perl \\\n            --with-pgport=5432 \\\n            --with-python \\\n            --with-pythonsrc-ext \\\n            --with-ssl=openssl \\\n            --with-uuid=e2fs \\\n            --with-includes=/usr/local/xerces-c/include \\\n            --with-libraries=/usr/local/cloudberry-db/lib\n\n# Build and install Cloudberry and its contrib modules\nmake -j$(nproc) -C ~/cloudberry\nmake -j$(nproc) -C ~/cloudberry/contrib\nmake install -C ~/cloudberry\nmake install -C ~/cloudberry/contrib\n\n# Verify the installation\n/usr/local/cloudberry-db/bin/postgres --gp-version\n/usr/local/cloudberry-db/bin/postgres --version\nldd /usr/local/cloudberry-db/bin/postgres\n\n# Set up a Cloudberry demo cluster\nsource /usr/local/cloudberry-db/greenplum_path.sh\nmake create-demo-cluster -C ~/cloudberry\nsource ~/cloudberry/gpAux/gpdemo/gpdemo-env.sh\npsql -P pager=off template1 -c \'SELECT * from gp_segment_configuration\'\npsql template1 -c \'SELECT version()\'\n'})})}),(0,o.jsx)(s.Z,{value:"ubuntu",label:"For Ubuntu 22.04+",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"\n# Install sudo & git\napt update && apt install -y sudo git\n\n# Create and configure the gpadmin user\nsudo useradd -U -m -s /bin/bash gpadmin\necho 'gpadmin ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/90-gpadmin\nsudo -u gpadmin sudo whoami # if the output is root, the configuration is correct\n\n# Required configuration\nsudo -u gpadmin bash <<'EOF'\n## Add Cloudberry environment setup to .bashrc\necho -e '\\n# Add Cloudberry entries\nif [ -f /usr/local/cloudberry-db/greenplum_path.sh ]; then\n  source /usr/local/cloudberry-db/greenplum_path.sh\nfi\n## US English with UTF-8 character encoding\nexport LANG=en_US.UTF-8\n' >> /home/gpadmin/.bashrc\n## Set up SSH for passwordless access\nmkdir -p /home/gpadmin/.ssh\nif [ ! -f /home/gpadmin/.ssh/id_rsa ]; then\n  ssh-keygen -t rsa -b 2048 -C 'apache-cloudberry-dev' -f /home/gpadmin/.ssh/id_rsa -N \"\"\nfi\ncat /home/gpadmin/.ssh/id_rsa.pub >> /home/gpadmin/.ssh/authorized_keys\n## Set proper SSH directory permissions\nchmod 700 /home/gpadmin/.ssh\nchmod 600 /home/gpadmin/.ssh/authorized_keys\nchmod 644 /home/gpadmin/.ssh/id_rsa.pub\nEOF\n\n# Configure system settings\nsudo tee /etc/security/limits.d/90-db-limits.conf << 'EOF'\n## Core dump file size limits for gpadmin\ngpadmin soft core unlimited\ngpadmin hard core unlimited\n## Open file limits for gpadmin\ngpadmin soft nofile 524288\ngpadmin hard nofile 524288\n## Process limits for gpadmin\ngpadmin soft nproc 131072\ngpadmin hard nproc 131072\nEOF\n\n# Verify resource limits\nsudo -u gpadmin bash -c \"ulimit -a\"\n\n# Install basic system packages\nsudo apt install -y gcc g++ libxml2-dev pkg-config bzip2 libzstd-dev bison python3 flex python3-dev libreadline-dev  libuv1-dev libkrb5-dev libapr1-dev libevent-dev libyaml-dev libssl-dev libpam0g-dev libcurl4-gnutls-dev libbz2-dev libldap2-dev libxerces-c-dev libperl-dev libipc-run-perl make cmake libprotobuf-dev python3-setuptools iproute2 iputils-ping rsync liblz4-dev protobuf-compiler language-pack-en locales\n\n# Use the gpadmin user from now on\nsudo su - gpadmin\n\n# Clone the Apache Cloudberry repository\ngit clone https://github.com/apache/cloudberry.git ~/cloudberry\ncd ~/cloudberry\ngit submodule update --init --recursive\n\n# Prepare the build environment for Apache Cloudberry\nsudo rm -rf /usr/local/cloudberry-db\nsudo chmod a+w /usr/local\nmkdir -p /usr/local/cloudberry-db\nsudo chown -R gpadmin.gpadmin /usr/local/cloudberry-db\n\n# Run configure\ncd ~/cloudberry\n./configure --prefix=/usr/local/cloudberry-db \\\n            --disable-external-fts \\\n            --enable-debug \\\n            --enable-cassert \\\n            --enable-debug-extensions \\\n            --enable-gpcloud \\\n            --enable-ic-proxy \\\n            --enable-mapreduce \\\n            --enable-orafce \\\n            --enable-orca \\\n            --enable-pax \\\n            --enable-pxf \\\n            --enable-tap-tests \\\n            --with-gssapi \\\n            --with-ldap \\\n            --with-libxml \\\n            --with-lz4 \\\n            --with-pam \\\n            --with-perl \\\n            --with-pgport=5432 \\\n            --with-python \\\n            --with-pythonsrc-ext \\\n            --with-ssl=openssl \\\n            --with-uuid=e2fs \\\n            --with-includes=/usr/include/xercesc\n\n# Build and install Cloudberry and its contrib modules\nmake -j$(nproc) -C ~/cloudberry\nmake -j$(nproc) -C ~/cloudberry/contrib\nmake install -C ~/cloudberry\nmake install -C ~/cloudberry/contrib\n\n# Verify the installation\n/usr/local/cloudberry-db/bin/postgres --gp-version\n/usr/local/cloudberry-db/bin/postgres --version\nldd /usr/local/cloudberry-db/bin/postgres\n\n# Set up a Cloudberry demo cluster\nsource /usr/local/cloudberry-db/greenplum_path.sh\nmake create-demo-cluster -C ~/cloudberry\nsource ~/cloudberry/gpAux/gpdemo/gpdemo-env.sh\npsql -P pager=off template1 -c 'SELECT * from gp_segment_configuration'\npsql template1 -c 'SELECT version()'\n"})})})]})]})}function b(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},85162:(e,n,r)=>{r.d(n,{Z:()=>s});r(67294);var o=r(90512);const t={tabItem:"tabItem_Ymn6"};var l=r(85893);function s(e){let{children:n,hidden:r,className:s}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,o.Z)(t.tabItem,s),hidden:r,children:n})}},74866:(e,n,r)=>{r.d(n,{Z:()=>w});var o=r(67294),t=r(90512),l=r(12466),s=r(16550),a=r(20469),i=r(91980),u=r(67392),d=r(50012);function c(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:r,attributes:o,default:t}}=e;return{value:n,label:r,attributes:o,default:t}}))}(r);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function b(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:r}=e;const t=(0,s.k6)(),l=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,i._X)(l),(0,o.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(t.location.search);n.set(l,e),t.replace({...t.location,search:n.toString()})}),[l,t])]}function h(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,l=p(e),[s,i]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=r.find((e=>e.default))??r[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:l}))),[u,c]=m({queryString:r,groupId:t}),[h,g]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,l]=(0,d.Nk)(r);return[t,(0,o.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:t}),f=(()=>{const e=u??h;return b({value:e,tabValues:l})?e:null})();(0,a.Z)((()=>{f&&i(f)}),[f]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!b({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,l]),tabValues:l}}var g=r(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=r(85893);function v(e){let{className:n,block:r,selectedValue:o,selectValue:s,tabValues:a}=e;const i=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),d=e=>{const n=e.currentTarget,r=i.indexOf(n),t=a[r].value;t!==o&&(u(n),s(t))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;n=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;n=i[r]??i[i.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":r},n),children:a.map((e=>{let{value:n,label:r,attributes:l}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>i.push(e),onKeyDown:c,onClick:d,...l,className:(0,t.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":o===n}),children:r??n},n)}))})}function E(e){let{lazy:n,children:r,selectedValue:t}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===t));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function x(e){const n=h(e);return(0,y.jsxs)("div",{className:(0,t.Z)("tabs-container",f.tabList),children:[(0,y.jsx)(v,{...e,...n}),(0,y.jsx)(E,{...e,...n})]})}function w(e){const n=(0,g.Z)();return(0,y.jsx)(x,{...e,children:c(e.children)},String(n))}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>s});var o=r(67294);const t={},l=o.createContext(t);function s(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);