"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[68098],{82126:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var n=t(85893),a=t(11151);const i={title:"gp_id"},r="gp_id",d={id:"sys-catalogs/sys-tables/gp-id",title:"gp_id",description:"The gpid system catalog table in the pgcatalog schema identifies the Apache Cloudberry system name and number of segments for the system. It also has local values for the particular database instance (segment or coordinator) on which the table resides. This table is defined in the pg_global tablespace, meaning it is globally shared across all databases in the system.",source:"@site/versioned_docs/version-2.x/sys-catalogs/sys-tables/gp-id.md",sourceDirName:"sys-catalogs/sys-tables",slug:"/sys-catalogs/sys-tables/gp-id",permalink:"/docs/sys-catalogs/sys-tables/gp-id",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/sys-catalogs/sys-tables/gp-id.md",tags:[],version:"2.x",lastUpdatedBy:"TomShawn",lastUpdatedAt:1758176984,formattedLastUpdatedAt:"Sep 18, 2025",frontMatter:{title:"gp_id"},sidebar:"docsbars",previous:{title:"gp_fastsequence",permalink:"/docs/sys-catalogs/sys-tables/gp-fastsequence"},next:{title:"gp_partition_template",permalink:"/docs/sys-catalogs/sys-tables/gp-partition-template"}},l={},c=[];function o(e){const s={code:"code",em:"em",h1:"h1",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"gp_id",children:"gp_id"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"gp_id"})," system catalog table in the ",(0,n.jsx)(s.code,{children:"pg_catalog"})," schema identifies the Apache Cloudberry system name and number of segments for the system. It also has ",(0,n.jsx)(s.code,{children:"local"})," values for the particular database instance (segment or coordinator) on which the table resides. This table is defined in the ",(0,n.jsx)(s.code,{children:"pg_global"})," tablespace, meaning it is globally shared across all databases in the system."]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"column"}),(0,n.jsx)(s.th,{children:"type"}),(0,n.jsx)(s.th,{children:"references"}),(0,n.jsx)(s.th,{children:"description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"gpname"})}),(0,n.jsx)(s.td,{children:"name"}),(0,n.jsx)(s.td,{children:"\xa0"}),(0,n.jsx)(s.td,{children:"The name of this Apache Cloudberry system."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"numsegments"})}),(0,n.jsx)(s.td,{children:"smallint"}),(0,n.jsx)(s.td,{children:"\xa0"}),(0,n.jsx)(s.td,{children:"The number of segments in the Apache Cloudberry system."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"dbid"})}),(0,n.jsx)(s.td,{children:"smallint"}),(0,n.jsx)(s.td,{children:"\xa0"}),(0,n.jsx)(s.td,{children:"The unique identifier of this segment (or coordinator) instance."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"content"})}),(0,n.jsx)(s.td,{children:"smallint"}),(0,n.jsx)(s.td,{children:"\xa0"}),(0,n.jsxs)(s.td,{children:["The ID for the portion of data on this segment instance. A primary and its mirror will have the same content ID.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"For a segment the value is from 0-",(0,n.jsx)(s.em,{children:"N-1"}),", where ",(0,n.jsx)(s.em,{children:"N"})," is the number of segments in Apache Cloudberry.",(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),"For the coordinator, the value is -1."]})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},11151:(e,s,t)=>{t.d(s,{Z:()=>d,a:()=>r});var n=t(67294);const a={},i=n.createContext(a);function r(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);