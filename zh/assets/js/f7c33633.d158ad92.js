"use strict";(self.webpackChunkApache_Cloudberry_Incubating_website=self.webpackChunkApache_Cloudberry_Incubating_website||[]).push([[31622],{19683:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var s=t(85893),r=t(11151);const o={title:"Set up a Cloudberry demo cluster"},a=void 0,i={id:"deployment/set-demo-cluster",title:"Set up a Cloudberry demo cluster",description:"This step walks through setting up a Cloudberry demo cluster, and testing basic functionality. The demo cluster includes a coordinator, standby coordinator, and multiple primary/mirror segments all running on a single development host.",source:"@site/versioned_docs/version-2.x/deployment/set-demo-cluster.md",sourceDirName:"deployment",slug:"/deployment/set-demo-cluster",permalink:"/zh/docs/deployment/set-demo-cluster",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/cloudberry-site/edit/main/versioned_docs/version-2.x/deployment/set-demo-cluster.md",tags:[],version:"2.x",lastUpdatedBy:"TomShawn",lastUpdatedAt:1752804508,formattedLastUpdatedAt:"2025\u5e747\u670818\u65e5",frontMatter:{title:"Set up a Cloudberry demo cluster"},sidebar:"docsbars",previous:{title:"Build and Install Apache Cloudberry and contrib extensions",permalink:"/zh/docs/deployment/build-and-install"},next:{title:"Post installation",permalink:"/zh/docs/deployment/post-installation"}},l={},d=[{value:"Set up initial container (not required for all environments)",id:"set-up-initial-container-not-required-for-all-environments",level:2},{value:"Configure SSH for Cloudberry",id:"configure-ssh-for-cloudberry",level:2},{value:"Set up Cloudberry environment variables",id:"set-up-cloudberry-environment-variables",level:2},{value:"Create development cluster",id:"create-development-cluster",level:2},{value:"Configure cluster environment",id:"configure-cluster-environment",level:2},{value:"Validate cluster deployment",id:"validate-cluster-deployment",level:2},{value:"Connect to the default <code>postgres</code> database",id:"connect-to-the-default-postgres-database",level:2},{value:"Extension Testing Example: pg_stat_statements",id:"extension-testing-example-pg_stat_statements",level:2},{value:"Destroy development cluster",id:"destroy-development-cluster",level:2},{value:"Troubleshoot SSH connection issues",id:"troubleshoot-ssh-connection-issues",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This step walks through setting up a Cloudberry demo cluster, and testing basic functionality. The demo cluster includes a coordinator, standby coordinator, and multiple primary/mirror segments all running on a single development host."}),"\n",(0,s.jsx)(n.h2,{id:"set-up-initial-container-not-required-for-all-environments",children:"Set up initial container (not required for all environments)"}),"\n",(0,s.jsx)(n.p,{children:"Container environments typically don't start the SSH daemon process by default. Since Cloudberry relies heavily on SSH for inter-process communication, we need to initialize and start the SSH server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'if ! pgrep sshd > /dev/null; then\n    echo "SSH daemon not running. Starting it now..."\n    sudo ssh-keygen -A\n    echo "PasswordAuthentication yes" | sudo tee -a /etc/ssh/sshd_config\n    sudo /usr/sbin/sshd\nelse\n    echo "SSH daemon is already running"\nfi\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configure-ssh-for-cloudberry",children:"Configure SSH for Cloudberry"}),"\n",(0,s.jsx)(n.p,{children:"Cloudberry uses SSH for coordinator-segment communication. The following commands ensure SSH is properly configured for the gpadmin user by adding the host to known_hosts and verifying SSH connectivity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ssh-keyscan $(hostname) >> ~/.ssh/known_hosts\nssh $(hostname) date\n"})}),"\n",(0,s.jsx)(n.h2,{id:"set-up-cloudberry-environment-variables",children:"Set up Cloudberry environment variables"}),"\n",(0,s.jsx)(n.p,{children:"Load Cloudberry environment variables that set up paths for binaries, libraries, and other essential components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"source /usr/local/cloudberry-db/greenplum_path.sh\n"})}),"\n",(0,s.jsx)(n.h2,{id:"create-development-cluster",children:"Create development cluster"}),"\n",(0,s.jsx)(n.p,{children:"Create a demo cluster that simulates a full Cloudberry deployment on a single machine. This includes 1 coordinator, 1 standby coordinator, 3 primary segments, and 3 mirror segments:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make create-demo-cluster --directory=~/cloudberry\n"})}),"\n",(0,s.jsx)(n.p,{children:"In the demo cluster, the cooradinator, standby coordinator and segments ports will be as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    COORDINATOR PORT (PGPORT). : 7000\n    STANDBY PORT ............. : 7001\n    SEGMENT PORTS ............ : 7002 7003 7004 7005 7006 7007\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configure-cluster-environment",children:"Configure cluster environment"}),"\n",(0,s.jsx)(n.p,{children:"After cluster creation, verify and load cluster-specific variables that point to the coordinator port and data directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"source ~/cloudberry/gpAux/gpdemo/gpdemo-env.sh\n"})}),"\n",(0,s.jsx)(n.h2,{id:"validate-cluster-deployment",children:"Validate cluster deployment"}),"\n",(0,s.jsx)(n.p,{children:"Verify the cluster is running correctly with these essential commands:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Displays detailed cluster state including segment status\ngpstate\n\n# Tests cluster shutdown and startup\ngpstop -a\ngpstart -a\n\n# Confirms Cloudberry version and build\npsql template1 -c 'SELECT version()'\n\n# Views segment configuration showing primary/mirror relationships\npsql template1 -c 'SELECT * from gp_segment_configuration'\n\n# Checks available PostgreSQL extensions\npsql template1 -c 'SELECT * FROM pg_available_extensions'\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"connect-to-the-default-postgres-database",children:["Connect to the default ",(0,s.jsx)(n.code,{children:"postgres"})," database"]}),"\n",(0,s.jsxs)(n.p,{children:["To connect to the default ",(0,s.jsx)(n.code,{children:"postgres"})," database, use the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"psql -p 7000 postgres\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"psql postgres\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output will be like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'[gpadmin@cdw cloudberry]$ psql -p 7000 postgres\npsql (14.4, server 14.4)\nType "help" for help.\n\npostgres=# select version();\n                                                                                                             version\n------------------------------------------------------------------------------------------------------------------------\n PostgreSQL 14.4 (Apache Cloudberry 2.0.0-devel+dev.1959.g94a81765e6 build dev) on x86_64-pc-linux-gnu, compiled by gcc (GCC\n) 11.5.0 20240719 (Red Hat 11.5.0-5), 64-bit compiled on May 28 2025 19:57:16 (with assert checking)\n(1 row)\n\npostgres=# \\q\n'})}),"\n",(0,s.jsx)(n.h2,{id:"extension-testing-example-pg_stat_statements",children:"Extension Testing Example: pg_stat_statements"}),"\n",(0,s.jsxs)(n.p,{children:["This example demonstrates how to enable and test the ",(0,s.jsx)(n.code,{children:"pg_stat_statements"})," extension, which provides statistics about SQL query execution:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Creates a database for testing\ncreatedb gpadmin\n\n# Enables the extension by adding it to shared libraries\necho \"shared_preload_libraries='pg_stat_statements'\" >> $COORDINATOR_DATA_DIRECTORY/postgresql.conf\n\n# Restarts cluster to load the new library (-r flag means \"restart\")\ngpstop -ar\n\n# Creates the extension in the database\npsql gpadmin -e -c 'CREATE EXTENSION pg_stat_statements'\n\n# Runs test queries to generate statistics\npsql gpadmin --echo-queries <<EOF\n-- Create a sample table\nCREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name TEXT,\n    department TEXT,\n    salary NUMERIC\n);\n\n-- Insert sample data\nINSERT INTO employees (name, department, salary)\nVALUES\n('Alice', 'HR', 60000),\n('Bob', 'Engineering', 80000),\n('Charlie', 'Marketing', 70000);\n\n-- Query the data to generate some statistics\nSELECT * FROM employees WHERE department = 'Engineering';\nSELECT AVG(salary) FROM employees;\n\n-- View most frequently called queries\nSELECT query, calls, total_exec_time AS total_time, rows\nFROM pg_stat_statements\nORDER BY calls DESC\nLIMIT 5;\n\n-- View most time-consuming queries\nSELECT query, calls, total_exec_time AS total_time, rows\nFROM pg_stat_statements\nORDER BY total_exec_time DESC\nLIMIT 5;\nEOF\n"})}),"\n",(0,s.jsx)(n.h2,{id:"destroy-development-cluster",children:"Destroy development cluster"}),"\n",(0,s.jsx)(n.p,{children:"To clean up and start fresh, you can destroy the demo cluster:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make destroy-demo-cluster --directory=~/cloudberry\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command removes all cluster data and configuration, allowing you to create a new clean cluster if needed."}),"\n",(0,s.jsx)(n.h2,{id:"troubleshoot-ssh-connection-issues",children:"Troubleshoot SSH connection issues"}),"\n",(0,s.jsxs)(n.p,{children:["When running ",(0,s.jsx)(n.code,{children:"create-demo-cluster"}),", the process may hang if SSH host verification hasn't been completed. This typically manifests as a stalled process waiting for user input to verify the host identity."]}),"\n",(0,s.jsx)(n.p,{children:"This is why we run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ssh-keyscan $(hostname) >> ~/.ssh/known_hosts\n"})}),"\n",(0,s.jsx)(n.p,{children:"before creating the cluster. This command automatically adds the host's SSH keys to the known_hosts file, preventing interactive prompts during cluster creation."}),"\n",(0,s.jsx)(n.p,{children:"If you still encounter SSH issues:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Verify that the SSH daemon is running"}),"\n",(0,s.jsx)(n.li,{children:"Check that the known_hosts file exists and has the correct permissions"}),"\n",(0,s.jsxs)(n.li,{children:["Test SSH connectivity with ",(0,s.jsx)(n.code,{children:"ssh $(hostname) date"})," before proceeding with cluster creation"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var s=t(67294);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);